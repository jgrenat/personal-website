{"is404":false,"staticData":{"420756529":"{\"items\":[{\"id\":{\"videoId\":\"V2DgGyH6D_k\"}},{\"id\":{\"videoId\":\"Zp4p7DiWMuA\"}},{\"id\":{\"videoId\":\"WToGeMIdoSY\"}},{\"id\":{\"videoId\":\"AQkCgGajhxg\"}},{\"id\":{\"videoId\":\"uFzBmBoSrS0\"}}]}","1142833480":"{\"title\":\"[Code in the Unknown] Adding a \\\"cancel\\\" action to a chess game\",\"thumbnail_height\":360,\"thumbnail_width\":480,\"thumbnail_url\":\"https://i.ytimg.com/vi/Zp4p7DiWMuA/hqdefault.jpg\",\"html\":\"<iframe width=\\\"200\\\" height=\\\"113\\\" src=\\\"https://www.youtube.com/embed/Zp4p7DiWMuA?feature=oembed\\\" frameborder=\\\"0\\\" allow=\\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\\\" allowfullscreen title=\\\"[Code in the Unknown] Adding a &quot;cancel&quot; action to a chess game\\\"></iframe>\"}","2243736650":"{\"title\":\"Discovering Supabase, a Firebase alternative based on PostgreSQL (part 2)\",\"thumbnail_height\":360,\"thumbnail_width\":480,\"thumbnail_url\":\"https://i.ytimg.com/vi/V2DgGyH6D_k/hqdefault.jpg\",\"html\":\"<iframe width=\\\"200\\\" height=\\\"113\\\" src=\\\"https://www.youtube.com/embed/V2DgGyH6D_k?feature=oembed\\\" frameborder=\\\"0\\\" allow=\\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\\\" allowfullscreen title=\\\"Discovering Supabase, a Firebase alternative based on PostgreSQL (part 2)\\\"></iframe>\"}","2730572102":"{\"title\":\"Creating a Elm package for DatoCMS (part 3)\",\"thumbnail_height\":360,\"thumbnail_width\":480,\"thumbnail_url\":\"https://i.ytimg.com/vi/uFzBmBoSrS0/hqdefault.jpg\",\"html\":\"<iframe width=\\\"200\\\" height=\\\"113\\\" src=\\\"https://www.youtube.com/embed/uFzBmBoSrS0?feature=oembed\\\" frameborder=\\\"0\\\" allow=\\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\\\" allowfullscreen title=\\\"Creating a Elm package for DatoCMS (part 3)\\\"></iframe>\"}","2814011531":"{\"data\":{\"homePage\":{\"picture\":{\"url4062855192\":\"https://www.datocms-assets.com/53557/1630943458-profil-200.jpg?crop64=Zm9jYWxwb2ludCxmYWNlcyxlbnRyb3B5&fit=crop&h=80&mask=ellipse&w=80\"},\"introductionText12867311\":\"Passionate web developer, caring for user experience and code quality. In this blog, I share my discoveries and reflexions.\"},\"article3313220010\":{\"name1875757806\":\"ðŸ‡«ðŸ‡·   Un design system en Elm\",\"banner\":{\"url1984142787\":\"https://www.datocms-assets.com/53557/1630943300-legos.png?fit=crop&max-h=250&max-w=800\"},\"content103746919\":{\"value3343696236\":{\"schema\":\"dast\",\"document\":{\"type\":\"root\",\"children\":[{\"type\":\"paragraph\",\"children\":[{\"type\":\"span\",\"value\":\"Dans ma boÃ®te, nous avons rÃ©cemment dÃ©marrÃ© notre premier projet Elm pour un client. Je ne l'avais jusqu'Ã  prÃ©sent utilisÃ© que pour des projets personnels ou des projets internes. Collaborant avec un graphiste et fort de mes expÃ©riences prÃ©cÃ©dentes dans le monde JavaScript, j'ai tout de suite optÃ© pour la mÃ©thodologie du Design System.\"}]},{\"type\":\"paragraph\",\"children\":[{\"type\":\"span\",\"value\":\"L'idÃ©e est simple : plutÃ´t que de travailler sur des pages entiÃ¨res, on va travailler sur les diffÃ©rents composants de nos pages. Ces composants sont dÃ©veloppÃ©s indÃ©pendamment les uns des autres avec une collaboration forte entre un designer et un dÃ©veloppeur. Le design system centralise ensuite toutes les rÃ¨gles et propriÃ©tÃ©s du projet (couleurs, espacements, typographies, etc.) ainsi que les composants sous leurs diffÃ©rents Ã©tats.\"}]},{\"type\":\"paragraph\",\"children\":[{\"type\":\"span\",\"value\":\"Cet article n'Ã©tant pas destinÃ© Ã  rentrer dans les dÃ©tails de la mÃ©thodologie en elle-mÃªme, je vous redirige vers cet excellent talk oÃ¹ CÃ©cile Freyd-Foucault et Florent Berthelot l'expliquent point par point : \"},{\"url\":\"https://www.youtube.com/watch?v=jXcO7Qu1Gjs\",\"type\":\"link\",\"children\":[{\"type\":\"span\",\"value\":\"Designers, dÃ©veloppeurs, crÃ©ons la diffÃ©rence !\"}]}]},{\"type\":\"paragraph\",\"children\":[{\"type\":\"span\",\"value\":\"Ce qu'il faut retenir pour la suite de cet article, c'est qu'on essaye de centraliser au maximum les rÃ¨gles et composants graphiques de notre site pour l'exposer dans un endroit facilement accessible.\"}]},{\"type\":\"heading\",\"level\":2,\"children\":[{\"type\":\"span\",\"value\":\"Design system en Elm\"}]},{\"type\":\"paragraph\",\"children\":[{\"type\":\"span\",\"value\":\"J'Ã©tais assez curieux de voir ce que donnerait cette approche en Elm. L'idÃ©e d'avoir un langage fonctionnel dans lequel tout est pur et centrÃ© autour de fonctions rÃ©utilisables me semblait parfaitement correspondre. Et comme je le pensais, Elm s'est rÃ©vÃ©lÃ© idÃ©al pour implÃ©menter un design system !\"}]},{\"type\":\"blockquote\",\"children\":[{\"type\":\"paragraph\",\"children\":[{\"type\":\"span\",\"value\":\"Avant d'aller plus loin, il me faut cependant Ã©claircir un point. Je vais parler dans la suite de cet article de \"},{\"type\":\"span\",\"marks\":[\"strong\"],\"value\":\"composants\"},{\"type\":\"span\",\"value\":\". Ce terme dÃ©signe un Ã©lÃ©ment visuellement distinct dans une page web, comme par exemple une carte dans une liste, un tableau dans une page, etc. Dans le monde JavaScript, ce terme a tendance Ã  signifier quelque chose de similaire, mais avec une particularitÃ© supplÃ©mentaire : les composants gÃ¨rent en gÃ©nÃ©ral un Ã©tat interne invisible de l'extÃ©rieur. En Elm, on cherchera Ã  Ã©viter au maximum les composants ayant un Ã©tat interne pour privilÃ©gier au maximum les fonctions pures.\"}]}]},{\"type\":\"paragraph\",\"children\":[{\"type\":\"span\",\"value\":\"Nous avions plusieurs choix techniques possibles pour crÃ©er nos rÃ¨gles et composants :\"}]},{\"type\":\"list\",\"style\":\"bulleted\",\"children\":[{\"type\":\"listItem\",\"children\":[{\"type\":\"paragraph\",\"children\":[{\"type\":\"span\",\"value\":\"utiliser la bibliothÃ¨que standard \"},{\"type\":\"span\",\"marks\":[\"code\"],\"value\":\"elm/html\"},{\"type\":\"span\",\"value\":\" avec un fichier CSS et des classes suivant \"},{\"url\":\"https://www.alsacreations.com/article/lire/1641-bonnes-pratiques-en-css-bem-et-oocss.html\",\"type\":\"link\",\"children\":[{\"type\":\"span\",\"value\":\"les mÃ©thodologies OOCSS ou BEM\"}]}]}]},{\"type\":\"listItem\",\"children\":[{\"type\":\"paragraph\",\"children\":[{\"type\":\"span\",\"value\":\"utiliser \"},{\"url\":\"https://package.elm-lang.org/packages/mdgriffith/elm-ui/latest/\",\"type\":\"link\",\"children\":[{\"type\":\"span\",\"marks\":[\"code\"],\"value\":\"mdgriffith/elm-ui\"}]},{\"type\":\"span\",\"value\":\" avec son approche sans CSS\"}]}]},{\"type\":\"listItem\",\"children\":[{\"type\":\"paragraph\",\"children\":[{\"type\":\"span\",\"value\":\"utiliser \"},{\"url\":\"https://package.elm-lang.org/packages/rtfeldman/elm-css/latest/\",\"type\":\"link\",\"children\":[{\"type\":\"span\",\"marks\":[\"code\"],\"value\":\"rtfeldman/elm-css\"}]},{\"type\":\"span\",\"value\":\" qui propose une approche intÃ©ressante de CSS typÃ© nous orientant vers du \"},{\"type\":\"span\",\"marks\":[\"emphasis\"],\"value\":\"CSS in Elm\"}]}]}]},{\"type\":\"paragraph\",\"children\":[{\"type\":\"span\",\"value\":\"La curiositÃ© pour cette derniÃ¨re solution a jouÃ© un grand rÃ´le dans le choix malgrÃ© ma rÃ©ticence lÃ©gendaire pour les solutions de \"},{\"type\":\"span\",\"marks\":[\"emphasis\"],\"value\":\"CSS in JavaScript\"},{\"type\":\"span\",\"value\":\". La premiÃ¨re alternative Ã©tait trÃ¨s semblable Ã  celle que j'ai l'habitude de suivre en JavaScript et je souhaitais changer pour ce projet. Quant Ã  la deuxiÃ¨me option, j'avais dÃ©jÃ  eu l'occasion d'utiliser un peu \"},{\"type\":\"span\",\"marks\":[\"code\"],\"value\":\"elm-ui\"},{\"type\":\"span\",\"value\":\" et avait eu le sentiment qu'il rÃ©glait un problÃ¨me que je n'avais personnellement pas : j'ai toujours apprÃ©ciÃ© le CSS et ses possibilitÃ©s et me sentais un peu contraint par le champs rÃ©duit des possibles d'\"},{\"type\":\"span\",\"marks\":[\"code\"],\"value\":\"elm-ui\"},{\"type\":\"span\",\"value\":\".\"}]},{\"type\":\"paragraph\",\"children\":[{\"type\":\"span\",\"value\":\"Nous sommes donc partis sur le fait d'utiliser \"},{\"type\":\"span\",\"marks\":[\"code\"],\"value\":\"elm-css\"},{\"type\":\"span\",\"value\":\" avec ces quelques rÃ¨gles simples :\"}]},{\"type\":\"list\",\"style\":\"bulleted\",\"children\":[{\"type\":\"listItem\",\"children\":[{\"type\":\"paragraph\",\"children\":[{\"type\":\"span\",\"value\":\"chaque composant (ou groupe de composants) a son propre fichier Elm dans lequel on peut trouver le composant et le CSS correspondant\"}]}]},{\"type\":\"listItem\",\"children\":[{\"type\":\"paragraph\",\"children\":[{\"type\":\"span\",\"value\":\"ce CSS est dÃ©fini de faÃ§on globale, c'est-Ã -dire qu'il gÃ©nÃ¨re une feuille de style CSS propre (par opposition au fait de n'utiliser que des styles \"},{\"type\":\"span\",\"marks\":[\"emphasis\"],\"value\":\"inline\"},{\"type\":\"span\",\"value\":\", autre possibilitÃ© de \"},{\"type\":\"span\",\"marks\":[\"code\"],\"value\":\"elm-css\"},{\"type\":\"span\",\"value\":\")\"}]}]},{\"type\":\"listItem\",\"children\":[{\"type\":\"paragraph\",\"children\":[{\"type\":\"span\",\"value\":\"les couleurs, typographies et espacements sont dans leur module propre\"}]}]},{\"type\":\"listItem\",\"children\":[{\"type\":\"paragraph\",\"children\":[{\"type\":\"span\",\"value\":\"nos composants doivent Ãªtre composables : chacun d'eux prend une liste d'attributs et d'enfants comme le ferait n'importe quelle fonction de \"},{\"type\":\"span\",\"marks\":[\"code\"],\"value\":\"elm/html\"}]}]}]},{\"type\":\"paragraph\",\"children\":[{\"type\":\"span\",\"value\":\"Petit exemple pour un bouton :\"}]},{\"code\":\"button : ButtonType -> ButtonSize -> List (Html.Attribute msg) -> List (Html msg) -> Html msg  \\nbutton buttonType buttonSize attributes content =  \\n    let  \\n        typeClass =  \\n            class (getTypeClass buttonType)  \\n      \\n        sizeClass =  \\n            class (getSizeClass buttonSize)  \\n\\tin  \\n\\tHtml.button  \\n        ([ class \\\"button\\\", typeClass, sizeClass ] ++ attributes)  \\n        content\\n\\nstyles : List Css.Snippet  \\nstyles =  \\n    [ Css.Global.class \\\"button\\\"  \\n        [ borderRadius (px 3)  \\n        , textTransform uppercase  \\n        , cursor pointer    \\n        , textAlign center  \\n        , withClass \\\"button--primary\\\"  \\n            [ backgroundColor Colors.primary  \\n            , color Colors.colorOnPrimary  \\n            ]    \\n        , withClass \\\"button--large\\\"  \\n            [ padding2 (px 10) (px 16)  \\n            ]\\n        -- ... \\t\\n        ]\\n    ]\",\"type\":\"code\",\"language\":\"elm\"},{\"type\":\"paragraph\",\"children\":[{\"type\":\"span\",\"value\":\"On voit qu'on a un bouton gÃ©nÃ©rique qu'on peut personnaliser avec deux options : son type (primaire, secondaire, ...) et sa taille (large, medium, petit). Avec des fonctions Elm, c'est trÃ¨s simple Ã  rÃ©aliser et les types nous aident Ã  limiter les choix possibles !\"}]},{\"type\":\"paragraph\",\"children\":[{\"type\":\"span\",\"value\":\"Les styles sont dÃ©finis Ã  part puis centralisÃ©s entre composants et insÃ©rÃ©s une fois dans la page.\"}]},{\"type\":\"paragraph\",\"children\":[{\"type\":\"span\",\"value\":\"Une amÃ©lioration possible de ce code serait de typer nos classes pour Ã©viter les erreurs d'inattention, mais nous n'avons pas encore ressenti le besoin d'aller jusque lÃ  :\"}]},{\"code\":\"type ButtonClass =\\n    Button\\n    | ButtonPrimary\\n    | ButtonSecondary\\n    | ButtonLarge\\n\\nbuttonClassToClass : ButtonClass -> Html.Attribute msg\\nbuttonClassToClass buttonClass = \\n    case buttonClass of \\n        Button ->\\n            class \\\"button\\\"\\n        ButtonPrimary ->\\n            class \\\"button--primary\\\"\\n        ButtonSecondary ->\\n            class \\\"button--secondary\\\"\\n        ButtonLarge ->\\n            class \\\"button--large\\\"\",\"type\":\"code\",\"language\":\"elm\"},{\"type\":\"heading\",\"level\":2,\"children\":[{\"type\":\"span\",\"value\":\"Les Ã©lÃ©ments de base\"}]},{\"type\":\"paragraph\",\"children\":[{\"type\":\"span\",\"value\":\"Un design system commence en gÃ©nÃ©ral par les atomes, les Ã©lÃ©ments les plus simples. Nous avons donc commencÃ© par crÃ©er un fichier \"},{\"type\":\"span\",\"marks\":[\"code\"],\"value\":\"Colors\"},{\"type\":\"span\",\"value\":\" contenant toutes les couleurs de notre projet selon leur sÃ©mantique :\"}]},{\"code\":\"borderLight : Color  \\nborderLight =  \\n    rgba 0 0 0 0.12\\n\\n-- ... \\n\\nfieldBorder : Color  \\nfieldBorder =  \\n    borderLight\",\"type\":\"code\",\"language\":\"elm\"},{\"type\":\"paragraph\",\"children\":[{\"type\":\"span\",\"value\":\"Viennent ensuite les textes. Nous avons choisi d'utiliser une unique fonction pour tous les textes de l'application afin de centraliser toutes les possibilitÃ©s. Cette fonction s'appelle \"},{\"type\":\"span\",\"marks\":[\"code\"],\"value\":\"typography\"},{\"type\":\"span\",\"value\":\" et est utilisÃ©e aussi bien dans nos pages que dans nos composants. L'astuce est que cette fonction prend deux arguments essentiels : le type de texte et la balise Ã  utiliser :\"}]},{\"code\":\"type TypographyType  \\n    = Title1  \\n    | Title2  \\n    | Paragraph1\\n    | Paragraph2\\n    | Error\\n\\ntype alias Tag = \\n    List (Html.Attribute msg) -> List (Html msg) -> Html msg\\n\\ntypography : TypographyType -> Tag -> List (Html.Attribute msg) -> String -> Html msg  \\ntypography typographyType tagFunction attributes content =  \\n    let  \\n        className =  \\n            getClassName typographyType  \\n    in  \\n        tagFunction (class className :: attributes) [ text content ]\\n\\n-- Exemple d'utilisation :\\n\\nmyTitle =\\n\\ttypography Title1 h2 [] \\\"My title\\\"\",\"type\":\"code\",\"language\":\"elm\"},{\"type\":\"paragraph\",\"children\":[{\"type\":\"span\",\"value\":\"L'avantage est qu'on peut combiner trÃ¨s facilement style et sÃ©mantique : on peut notamment respecter la hiÃ©rarchie \"},{\"type\":\"span\",\"marks\":[\"code\"],\"value\":\"h1\"},{\"type\":\"span\",\"value\":\", \"},{\"type\":\"span\",\"marks\":[\"code\"],\"value\":\"h2\"},{\"type\":\"span\",\"value\":\", etc. sans Ãªtre contraint au niveau de l'apparence du texte.\"}]},{\"type\":\"paragraph\",\"children\":[{\"type\":\"span\",\"value\":\"De mÃªme, les espacements sont codifiÃ©s pour avoir un style plus uniforme sur le site :\"}]},{\"code\":\"type SpacingSize  \\n    = NoSpace | XXS | XS | S | M | L | XL  \\n  \\nspacing : SpacingSize -> Px  \\nspacing spacingSize =  \\n    case spacingSize of  \\n        NoSpace ->  \\n            px 0  \\n        XXS ->  \\n            px 4  \\n        XS ->  \\n            px 8  \\n        S ->  \\n            px 16  \\n        M ->  \\n            px 24  \\n        L ->  \\n            px 40  \\n        XL ->  \\n            px 60\\n\\n-- Exemple d'utilisation (avec elm-css) :\\n\\nmyTitle =\\n    typography Title1 h2 \\n        [ css [ marginTop (spacing M) ] ] \\n        \\\"My title\\\"\",\"type\":\"code\",\"language\":\"elm\"},{\"type\":\"heading\",\"level\":2,\"children\":[{\"type\":\"span\",\"value\":\"DiffÃ©rentes approches de composants\"}]},{\"type\":\"paragraph\",\"children\":[{\"type\":\"span\",\"value\":\"Pour les gens issus des univers React, Angular ou autre, le rÃ©flexe de penser en composants est profondÃ©ment ancrÃ©. En Elm cela est tout Ã  fait valable mais il faut en gÃ©nÃ©ral un peu de temps pour comprendre que la dÃ©finition de composant diffÃ¨re considÃ©rablement : un composant, ce n'est pas forcÃ©ment un Ã©lÃ©ment avec un Ã©tat interne capable de gÃ©rer lui-mÃªme ses mises Ã  jour.\"}]},{\"type\":\"paragraph\",\"children\":[{\"type\":\"span\",\"value\":\"Comme nous l'avons vu plus haut, un composant peut Ãªtre une simple fonction ! Et j'irai mÃªme plus loin en disant que si vous le pouvez, essayez au maximum de reprÃ©senter vos composants par une fonction, c'est de loin le type de composants le plus facile Ã  utiliser.\"}]},{\"type\":\"paragraph\",\"children\":[{\"type\":\"span\",\"value\":\"Mais cela ne suffit pas toujours et voici les diffÃ©rents cas que j'ai pu identifier :\"}]},{\"type\":\"list\",\"style\":\"bulleted\",\"children\":[{\"type\":\"listItem\",\"children\":[{\"type\":\"paragraph\",\"children\":[{\"type\":\"span\",\"value\":\"mon composant n'a pas d'Ã©tat interne\"}]}]},{\"type\":\"listItem\",\"children\":[{\"type\":\"paragraph\",\"children\":[{\"type\":\"span\",\"value\":\"mon composant a un Ã©tat interne mais pas d'effet secondaire\"}]}]},{\"type\":\"listItem\",\"children\":[{\"type\":\"paragraph\",\"children\":[{\"type\":\"span\",\"value\":\"mon composant a des effets secondaires internes\"}]}]}]},{\"type\":\"paragraph\",\"children\":[{\"type\":\"span\",\"value\":\"Je vais revenir sur chacun de ces cas.\"}]},{\"type\":\"heading\",\"level\":3,\"children\":[{\"type\":\"span\",\"value\":\"Mon composant n'a pas d'Ã©tat interne\"}]},{\"type\":\"paragraph\",\"children\":[{\"type\":\"span\",\"value\":\"Si votre composant n'a pas d'Ã©tat Ã  gÃ©rer, c'est de loin le plus simple ! C'est le cas du bouton vu plus haut, qui dÃ©lÃ¨gue Ã  celui qui l'utilise la gestion du clic :\"}]},{\"code\":\"backButton =\\n\\tbutton Secondary Large \\n\\t    [ type_ \\\"button\\\", onClick Back ] \\n\\t    [ text \\\"Back\\\" ]\",\"type\":\"code\",\"language\":\"elm\"},{\"type\":\"paragraph\",\"children\":[{\"type\":\"span\",\"value\":\"Mais par extension, un composant peut ne pas avoir d'Ã©tat interne parce qu'il est tout Ã  fait lÃ©gitime que le parent soit en charge de cet Ã©tat ! Par exemple, nous avons un bouton qui affiche un loader et se dÃ©sactive une fois cliquÃ©. Pour les requÃªtes HTTP, nous utilisons\"},{\"url\":\"https://package.elm-lang.org/packages/krisajenkins/remotedata/latest/RemoteData\",\"type\":\"link\",\"children\":[{\"type\":\"span\",\"value\":\"krisajenkins/remotedata\"}]},{\"type\":\"span\",\"value\":\" sur toute notre application, et donc nous l'utilisons Ã©galement pour l'Ã©tat de notre bouton :\"}]},{\"code\":\"buttonWithStatus : RemoteData e a -> List (Html.Attribute msg) -> List (Html msg) -> Html msg  \\nbuttonWithStatus status attributes content =  \\n    Html.button  \\n        ([ class \\\"button\\\"  \\n         , classList [ ( \\\"button--loading\\\", RemoteData.isLoading status ) ]  \\n         , disabled ( RemoteData.isLoading status )  \\n         ]  ++ attributes  \\n        )  \\n        (case status of  \\n            Loading ->  \\n                loader  \\n            _ ->  \\n                content  \\n        )\",\"type\":\"code\",\"language\":\"elm\"},{\"type\":\"paragraph\",\"children\":[{\"type\":\"span\",\"value\":\"Comme le composant parent possÃ¨de la responsabilitÃ© sur l'action effectuÃ©e, nul besoin d'avoir ce \"},{\"type\":\"span\",\"marks\":[\"code\"],\"value\":\"RemoteData\"},{\"type\":\"span\",\"value\":\" dans l'Ã©tat de notre composant, c'est un argument comme un autre !\"}]},{\"type\":\"heading\",\"level\":3,\"children\":[{\"type\":\"span\",\"value\":\"Mon composant a un Ã©tat interne mais pas d'effets secondaires\"}]},{\"type\":\"paragraph\",\"children\":[{\"type\":\"span\",\"value\":\"Certains de nos composants ont tout de mÃªme besoin de garder un Ã©tat interne qui ne devrait pas Ãªtre stockÃ© dans un composant parent. Par exemple, nos champs texte conservent toujours deux valeurs dans leur Ã©tat interne : la valeur actuelle du champ et une valeur indiquant si l'utilisateur a dÃ©jÃ  interagi avec le champ.\"}]},{\"code\":\"module Input exposing (InputModel)\\n\\ntype InputModel  \\n    = InputModel { value : String, touchStatus : TouchStatus }\",\"type\":\"code\",\"language\":\"elm\"},{\"type\":\"paragraph\",\"children\":[{\"type\":\"span\",\"value\":\"Une bonne pratique, comme on le voit ci-dessus, est d'utiliser un type opaque : notre module expose le type \"},{\"type\":\"span\",\"marks\":[\"code\"],\"value\":\"InputModel\"},{\"type\":\"span\",\"value\":\" mais pas le constructeur \"},{\"type\":\"span\",\"marks\":[\"code\"],\"value\":\"InputModel\"},{\"type\":\"span\",\"value\":\" (la nuance est importante, exposer le constructeur se ferait en modifiant la premiÃ¨re ligne : \"},{\"type\":\"span\",\"marks\":[\"code\"],\"value\":\"module Input exposing (InputModel(..))\"},{\"type\":\"span\",\"value\":\").\"}]},{\"type\":\"paragraph\",\"children\":[{\"type\":\"span\",\"value\":\"Cela signifie qu'en dehors de notre fichier, le dÃ©veloppeur n'est pas capable de modifier lui-mÃªme cet Ã©tat ou d'en crÃ©er un : le composant est le seul responsable de son Ã©tat interne.\"}]},{\"type\":\"paragraph\",\"children\":[{\"type\":\"span\",\"value\":\"Souvent, on voit que dans ces cas lÃ  les dÃ©veloppeurs Elm vont remettre en place une mini TEA dans le composant en lui crÃ©ant une fonction \"},{\"type\":\"span\",\"marks\":[\"code\"],\"value\":\"init\"},{\"type\":\"span\",\"value\":\", \"},{\"type\":\"span\",\"marks\":[\"code\"],\"value\":\"update\"},{\"type\":\"span\",\"value\":\", \"},{\"type\":\"span\",\"marks\":[\"code\"],\"value\":\"view\"},{\"type\":\"span\",\"value\":\" ainsi que des messages. Or, si effectivement il faut une faÃ§on d'initialiser le modÃ¨le et une faÃ§on de l'afficher, il n'est pas nÃ©cessaire d'avoir une fonction d'\"},{\"type\":\"span\",\"marks\":[\"code\"],\"value\":\"update\"},{\"type\":\"span\",\"value\":\" ou des messages si votre composant n'a pas d'effet secondaire !\"}]},{\"type\":\"paragraph\",\"children\":[{\"type\":\"span\",\"value\":\"Pour cela, on va renvoyer le nouveau modÃ¨le directement dans le message gÃ©nÃ©rÃ©, en demandant en argument supplÃ©mentaire un message dans lequel le stocker. Voici l'exemple :\"}]},{\"code\":\"input : String -> InputModel -> (InputModel -> msg) -> List (Html.Attribute msg) -> Html msg\\ninput inputName (InputModel model) toMsg attributes =  \\n    input  \\n        [ class \\\"input\\\"  \\n        , type_ \\\"text\\\"  \\n        , name inputName\\n        , Attributes.value model.value\\n        , onInput (\\\\newValue -> toMsg ( InputModel { model | value = newValue } ))\\n        ]  \\n        []\",\"type\":\"code\",\"language\":\"elm\"},{\"type\":\"paragraph\",\"children\":[{\"type\":\"span\",\"marks\":[\"emphasis\"],\"value\":\"(Ceci est un exemple trÃ¨s simplifiÃ© : notre composant \"},{\"type\":\"span\",\"marks\":[\"code\",\"emphasis\"],\"value\":\"input\"},{\"type\":\"span\",\"marks\":[\"emphasis\"],\"value\":\" gÃ¨re en rÃ©alitÃ© beaucoup plus de choses : un label, des erreurs, l'Ã©tat activÃ© / dÃ©sactivÃ©, etc.)\"}]},{\"type\":\"paragraph\",\"children\":[{\"type\":\"span\",\"value\":\"On voit qu'on peut ainsi retourner directement Ã  l'utilisateur le modÃ¨le modifiÃ©, ce qui est plus simple des deux cÃ´tÃ©s puisqu'on n'a pas besoin d'utiliser de \"},{\"type\":\"span\",\"marks\":[\"code\"],\"value\":\"Html.map\"},{\"type\":\"span\",\"value\":\" ou d'appeler une fonction d'\"},{\"type\":\"span\",\"marks\":[\"code\"],\"value\":\"update\"},{\"type\":\"span\",\"value\":\" pour le composant :\"}]},{\"code\":\"type alias Model = \\n    { inputModel : Input.InputModel }\\n\\ninit : Model \\ninit = \\n    { inputModel = Input.emptyInput }\\n\\ntype Msg =\\n    InputChanged Input.Model\\n\\nupdate : Msg -> Model -> Model\\nupdate msg model = \\n    case msg of\\n        InputChanged newModel ->\\n            { model | inputModel = newModel }\\n\\t\\nview : Model -> Html msg\\nview model =\\n    Input.input \\\"myInput\\\" model.inputModel InputChanged [] []\",\"type\":\"code\",\"language\":\"elm\"},{\"type\":\"heading\",\"level\":3,\"children\":[{\"type\":\"span\",\"value\":\"Mon composant a un Ã©tat interne et des effets secondaires\"}]},{\"type\":\"paragraph\",\"children\":[{\"type\":\"span\",\"value\":\"Si votre composant a des effets secondaires qui sont de sa responsabilitÃ© propre (et qui n'ont donc pas vocation a Ãªtre gÃ©rÃ©s par le parent), il faudra utiliser une forme plus complexe et embarquer une mini Elm Architecture dans votre composant.\"}]},{\"type\":\"paragraph\",\"children\":[{\"type\":\"span\",\"value\":\"Comprenez bien qu'on sort ici l'artillerie lourde : votre composant gÃ¨re beaucoup plus de responsabilitÃ© et devient d'autant moins facile Ã  utiliser. C'est donc la solution Ã  n'utiliser que lorsque le besoin le justifie.\"}]},{\"type\":\"paragraph\",\"children\":[{\"type\":\"span\",\"value\":\"C'est le cas pour notre slider par exemple, dont voici les types exposÃ©s (le code Ã©tant trop long) :\"}]},{\"code\":\"type Model -- Model un type opaque\\n\\ntype Msg -- Msg est un type opaque\\n\\ninit : Float -> Float -> Float -> Model\\n\\nupdate : Msg -> Model -> (Model, Cmd Msg)\\n\\nview : Model -> Msg\\n\\nsubscriptions : Model -> Sub Msg\\n\\nvalue : Model -> Float\",\"type\":\"code\",\"language\":\"elm\"},{\"type\":\"paragraph\",\"children\":[{\"type\":\"span\",\"value\":\"On reconnaÃ®t ici une \"},{\"url\":\"https://guide.elm-lang.org/architecture/\",\"type\":\"link\",\"children\":[{\"type\":\"span\",\"value\":\"Elm Architecture\"}]},{\"type\":\"span\",\"value\":\". L'\"},{\"type\":\"span\",\"marks\":[\"code\"],\"value\":\"init\"},{\"type\":\"span\",\"value\":\" prend trois \"},{\"type\":\"span\",\"marks\":[\"code\"],\"value\":\"Float\"},{\"type\":\"span\",\"value\":\" en argument : la valeur initiale, la valeur minimale et la valeur maximale. On reÃ§oit en retour un Model qui est un type opaque. La seule faÃ§on de crÃ©er et donc d'utiliser notre composant est donc de passer par cette fonction.\"}]},{\"type\":\"paragraph\",\"children\":[{\"type\":\"span\",\"value\":\"Les fonctions \"},{\"type\":\"span\",\"marks\":[\"code\"],\"value\":\"update\"},{\"type\":\"span\",\"value\":\", \"},{\"type\":\"span\",\"marks\":[\"code\"],\"value\":\"view\"},{\"type\":\"span\",\"value\":\" et \"},{\"type\":\"span\",\"marks\":[\"code\"],\"value\":\"subscriptions\"},{\"type\":\"span\",\"value\":\" sont standards, mais vont produire des messages de type \"},{\"type\":\"span\",\"marks\":[\"code\"],\"value\":\"Slider.Msg\"},{\"type\":\"span\",\"value\":\". Cela signifie que celui qui va les utiliser devra les \"},{\"type\":\"span\",\"marks\":[\"emphasis\"],\"value\":\"envelopper\"},{\"type\":\"span\",\"value\":\" dans un message Ã  lui :\"}]},{\"code\":\"type Msg  \\n    = MessageFromSlider Slider.Msg  \\n\\ntype alias Model =  \\n    { sliderModel : Slider.Model }  \\n\\nupdate : Msg -> Model -> ( Model, Cmd Msg )  \\nupdate msg model =  \\n    case msg of  \\n        MessageFromSlider sliderMsg ->  \\n            let  \\n                ( newSliderModel, sliderCmd ) =  \\n                    Slider.update msg model.sliderModel  \\n            in    \\n            ( { model | sliderModel = newSliderModel }  \\n            , Cmd.map MessageFromSlider sliderCmd  \\n            )\\n\\nview : Model -> Html Msg  \\nview model =  \\n    div []  \\n        [ Slider.view model.sliderModel  \\n            |> Html.map MessageFromSlider  \\n        ]\\n          \\nsubscriptions : Model -> Sub Msg  \\nsubscriptions model =  \\n    Slider.subscriptions model.sliderModel  \\n        |> Sub.map MessageFromSlider\",\"type\":\"code\",\"language\":\"elm\"},{\"type\":\"paragraph\",\"children\":[{\"type\":\"span\",\"value\":\"On enveloppe les messages du slider dans un message personnalisÃ© grÃ¢ce aux fonctions \"},{\"type\":\"span\",\"marks\":[\"code\"],\"value\":\"Cmd.map\"},{\"type\":\"span\",\"value\":\", \"},{\"type\":\"span\",\"marks\":[\"code\"],\"value\":\"Html.map\"},{\"type\":\"span\",\"value\":\" et \"},{\"type\":\"span\",\"marks\":[\"code\"],\"value\":\"Sub.map\"},{\"type\":\"span\",\"value\":\". On obtiendra ainsi un message \"},{\"type\":\"span\",\"marks\":[\"code\"],\"value\":\"MessageFromSlider\"},{\"type\":\"span\",\"value\":\" qui contient le message du slider. On se charge nous-mÃªme de transmettre ce message ainsi que le modÃ¨le Ã  la fonction d'\"},{\"type\":\"span\",\"marks\":[\"code\"],\"value\":\"update\"},{\"type\":\"span\",\"value\":\" du slider.\"}]},{\"type\":\"paragraph\",\"children\":[{\"type\":\"span\",\"value\":\"Comme on peut le voir, c'est une approche qui nÃ©cessite pas mal de code et qui est donc assez lourde. C'est pourquoi il est souvent recommandÃ© de simplifier au maximum ses composants quand c'est possible. C'est un rÃ©flexe parfois dur Ã  prendre quand on vient des frameworks JavaScript qui ont tendance Ã  considÃ©rer que tout est un composant indÃ©pendant.\"}]},{\"type\":\"heading\",\"level\":2,\"children\":[{\"type\":\"span\",\"value\":\"ConcrÃ©tiser son design system\"}]},{\"type\":\"paragraph\",\"children\":[{\"type\":\"span\",\"value\":\"RÃ©utiliser des composants et les lister dans son code, c'est trÃ¨s bien, mais c'est encore mieux quand on dispose d'une galerie permettant de les passer en revue ! Pour cela, j'ai utilisÃ© le package \"},{\"url\":\"https://package.elm-lang.org/packages/kalutheo/elm-ui-explorer/latest\",\"type\":\"link\",\"children\":[{\"type\":\"span\",\"marks\":[\"code\"],\"value\":\"elm-ui-explorer\"}]},{\"type\":\"span\",\"value\":\" de ThÃ©ophile Kalumbu, un Ã©quivalent plus simple de \"},{\"url\":\"https://storybook-design-system.netlify.com/?path=/docs/design-system-intro--page\",\"type\":\"link\",\"children\":[{\"type\":\"span\",\"value\":\"Storybook\"}]},{\"type\":\"span\",\"value\":\" dans l'univers JavaScript.\"}]},{\"type\":\"paragraph\",\"children\":[{\"url\":\"https://kalutheo.github.io/elm-ui-explorer/examples/dsm/index.html#Getting%20Started/About/About\",\"type\":\"link\",\"children\":[{\"type\":\"span\",\"value\":\"Voici un exemple d'un design system avec elm-ui-explorer\"}]}]},{\"type\":\"paragraph\",\"children\":[{\"type\":\"span\",\"value\":\"Les avantages d'avoir cette galerie sont multiples. PremiÃ¨rement, ils facilitent la discussion avec votre designer en se penchant directement sur l'implÃ©mentation que vous avez faite. Ils aident aussi les dÃ©veloppeurs lorsqu'ils ont besoin de retrouver des composants ou de revoir les diffÃ©rentes capacitÃ©s de leurs composants. Pendant la phase de dÃ©veloppement, cela offre aussi l'Ã©norme avantage de tester ses composants en totale isolation du reste du code, permettant ainsi de trouver des bugs visuels ou logiques qui auraient Ã©tÃ© durs Ã  dÃ©tecter autrement.\"}]},{\"type\":\"heading\",\"level\":2,\"children\":[{\"type\":\"span\",\"value\":\"Conclusion\"}]},{\"type\":\"paragraph\",\"children\":[{\"type\":\"span\",\"value\":\"Les design system c'est bien. Permettant d'harmoniser l'apparence visuelle de votre site, ils ont surtout de nombreux avantages lors du dÃ©veloppement d'un site internet : ils facilitent la crÃ©ation de nouvelles pages, rendent plus productive la collaboration dÃ©veloppeur / designer et permettent de dÃ©tecter plus rapidement des rÃ©gressions dans les composants de votre site.\"}]},{\"type\":\"paragraph\",\"children\":[{\"type\":\"span\",\"value\":\"En Elm, c'est trÃ¨s pratique. Comme tout est pur dans ce langage, sortir un composant pour le rendre rÃ©utilisable est Ã  peu de choses prÃ¨s aussi simple qu'un copier / coller. Et une fois ces composants crÃ©Ã©s, les grands atouts du langages interviennent Ã©galement : ils sont faciles Ã  refactorer et simples Ã  faire Ã©voluer puisque le compilateur sera lÃ  pour assurer vos arriÃ¨res.\"}]},{\"type\":\"paragraph\",\"children\":[{\"type\":\"span\",\"value\":\"Cette premiÃ¨re expÃ©rience de design system en Elm a Ã©tÃ© pour moi extrÃªmement positive ! Ce n'Ã©tait ni mon premier projet Elm, ni mon premier design system, mais la combinaison des deux s'est rÃ©vÃ©lÃ©e extrÃªmement productive. Si cet article a rÃ©ussi Ã  vous convaincre, c'est Ã  vous de jouer maintenant !\"}]}]}},\"blocks\":[],\"links\":[]},\"description12867311\":\"La mÃ©thodologie du design system apporte beaucoup au dÃ©veloppement front-end. \\n\\nSans surprise, Elm s'est rÃ©vÃ©lÃ© particuliÃ¨rement adaptÃ© Ã  l'implÃ©mentation de cette mÃ©thodologie !\",\"bannerAttribution\":[]}}}","2886442429":"{\"title\":\"Discovering Supabase, a Firebase alternative based on PostgreSQL\",\"thumbnail_height\":360,\"thumbnail_width\":480,\"thumbnail_url\":\"https://i.ytimg.com/vi/WToGeMIdoSY/hqdefault.jpg\",\"html\":\"<iframe width=\\\"200\\\" height=\\\"113\\\" src=\\\"https://www.youtube.com/embed/WToGeMIdoSY?feature=oembed\\\" frameborder=\\\"0\\\" allow=\\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\\\" allowfullscreen title=\\\"Discovering Supabase, a Firebase alternative based on PostgreSQL\\\"></iframe>\"}","2986682595":"{\"title\":\"Creating a Elm package for DatoCMS (last part)\",\"thumbnail_height\":360,\"thumbnail_width\":480,\"thumbnail_url\":\"https://i.ytimg.com/vi/AQkCgGajhxg/hqdefault.jpg\",\"html\":\"<iframe width=\\\"200\\\" height=\\\"113\\\" src=\\\"https://www.youtube.com/embed/AQkCgGajhxg?feature=oembed\\\" frameborder=\\\"0\\\" allow=\\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\\\" allowfullscreen title=\\\"Creating a Elm package for DatoCMS (last part)\\\"></iframe>\"}","3644372390":"{\"data\":{\"websiteConfiguration\":{\"name12867311\":\"JoGrenat's Blog\",\"youtubeChannelId12867311\":\"UCROJRWWGrrTmgGF1Wo9OX5w\",\"twitterIcon\":{\"url3832528868\":\"https://www.datocms-assets.com/53557/1632324226-twitterbird.svg\"},\"footerText12867311\":\"*Blog powered by [elm-pages](https://elm-pages.com/)*\"},\"_site\":{\"globalSeo\":{\"fallbackSeo\":{\"image\":{\"url1831060520\":\"https://www.datocms-assets.com/53557/1632838280-capture-d-ecran-2021-09-28-a-16-11-09.png?fit=fill&max-h=150&max-w=300\"}}}}}}"},"path":"blog/design-system-elm"}