module Articles.WhatILoveInElm exposing (article)

import Articles exposing (Article, Lang(..))
import Element exposing (html)
import Html exposing (div)
import Html.Attributes exposing (class, style)
import Markdown
import Markdown.Config exposing (HtmlOption(..))
import Time


article : Article msg
article =
    { title = "Ce que j'aime en Elm"
    , content =
        html
            (div [ style "max-width" "100%", class "markdown" ]
                (Markdown.toHtml
                    (Just
                        { softAsHardLineBreak = True
                        , rawHtml = ParseUnsafe
                        }
                    )
                    articleContent
                )
            )
    , publicationDate = Time.millisToPosix 1569348329000
    , lang = Fr
    , slug = "ce-que-jaime-en-elm"
    }


articleContent : String
articleContent =
    """L'arriv√©e en 2012 de Elm sur la sc√®ne des langages de programmation s'est faite en toute discr√©tion. Ce langage d√©di√© aux interfaces et applications web et compilant en JavaScript trouve progressivement ses utilisateurs sans pourtant √™tre autant m√©diatis√© que les alternatives JavaScript telles que React, AngularJS et Vue.js (qui ont bien souvent la puissance marketing d'un GAFAM derri√®re eux).

D√©veloppeur JavaScript depuis de nombreuses ann√©e lorsque j'ai d√©couvert ce langage, j'ai imm√©diatement √©t√© s√©duit par le langage mais √©galement par son √©cosyst√®me. Je vais essayer dans cet article de vous partager certains de ces points.

TL;DR : Parcourez les titres des diff√©rentes parties üòâ

## Simplicit√© du langage

Elm est simple. Le langage fait une seule chose et le fait bien : des interfaces et applications web. Tr√®s sp√©cialis√©, il contient donc le minimum d'√©l√©ments pour accomplir √† bien sa mission et rien d'autre. Les derni√®res versions du langage ont d'ailleurs supprim√© certains √©l√©ments jug√©s redondants, inutiles ou trop complexes. 

Les concepteurs n'h√©sitent pas √† r√©√©crire d'importantes parts du langage si de nouvelles mani√®res de faire semblent plus intuitives et plus logiques. Cela provoque √©videmment d'importants *breaking changes* entre les versions, mais nous verrons plus tard que cela n'est pas vraiment p√©nalisant lors des mont√©es de version avec ce langage.

L'absence de rupture de compatibilit√© est l'une des grandes forces de JavaScript : un site web qui fonctionne aujourd'hui est cens√© toujours fonctionner correctement dans 15 ans ! C'est √©galement malheureusement sa plus grande faiblesse : d√®s qu'une fonctionnalit√© est introduite dans le langage, elle l'est *ad vitam eternam* ! Con√ßu √† l'√©poque pour un web tr√®s diff√©rent du web que nous connaissons aujourd'hui, le langage comporte aujourd'hui de nombreux d√©fauts (tr√®s facilement utilis√©s par les d√©tracteurs du langage) qui sont malheureusement vou√©s √† y rester.

Mais Elm est compil√©, et c'est l√† toute sa force ! Un code qui fonctionne aujourd'hui fonctionnera toujours dans 15 ans si on le compile avec la m√™me version, puisqu'elle produire le m√™me code JavaScript ! Et cela n'emp√™che pas les versions suivantes de corriger leurs erreurs ! On peut donc facilement retirer des √©l√©ments du langage, gardant sa taille minimale. 

Un des effets indirects est qu'il y a en g√©n√©ral une seule fa√ßon d'effectuer quelque chose et le d√©veloppeur n'a donc pas √† peser les pour et les contre de chacune des alternatives, ce qui peut parfois √™tre d√©rangeant en JavaScript, qui poss√®de par exemple de nombreux outils rien que pour g√©rer l'asynchrone (callbacks, promises, observables, async / await, ...).

Selon mon exp√©rience, **un d√©veloppeur n'ayant jamais fait de Elm est plus rapidement productif sur une codebase Elm qu'un d√©veloppeur JavaScript sur un nouveau framework**.

## Simplicit√© des outils

Encore une fois, l'accent est mis sur la facilit√© pour les nouveaux arrivants. En installant Elm, l'utilisateur b√©n√©ficie de toute une gamme d'outils :

- un starter de projet pour initialiser rapidement un nouveau projet Elm
- un REPL (une console interactive) pour ex√©cuter du code Elm directement dans un terminal
- un gestionnaire de paquets pour installer des modules et les publier
- elm-reactor, un environnement de d√©veloppement complet capable de compiler le code √† la vol√©e
- le compilateur du langage

Et chacun de ces outils est vraiment intuitif et facile √† utiliser. Un exemple ? Il suffit de regarder ce que retourne un `elm init`:

```bash
‚ûú project elm init
Hello! Elm projects always start with an elm.json file. I can create them!

Now you may be wondering, what will be in this file? How do I add Elm files to my project? How do I see it in the browser? How will my code grow? Do I need more directories? What about tests? Etc.

Check out <https://elm-lang.org/0.19.0/init> for all the answers!

Knowing all that, would you like me to create an elm.json file now? [Y/n]: y
Okay, I created it. Now read that link!
```
C'est souvent ce genre de message qu'on va trouver dans les outils Elm : une volont√© d'expliquer ce qu'il se passe et de fournir tous les √©l√©ments n√©cessaires √† quelqu'un d√©butant dans le langage pour apprendre.

Les erreurs du compilateur sont d'ailleurs tr√®s souvent cit√©es pour leur c√¥t√© simple et didactique :

```bash
-- TYPE MISMATCH ----------------------------------- Main.elm

I cannot do addition with String values like this one:

4| "Hello " + "World"
  ^^^^^^^^

The (+) operator only works with Int and Float values.

Hint: Switch to the (++) operator to append strings!
```
L'erreur vous indique l'endroit du code concern√©, essaye de vous expliquer le plus pr√©cis√©ment et humainement l'erreur rencontr√©e et va souvent vous proposer des pistes pour la corriger. 

M√™me quand l'erreur est compl√®tement inconnue du compilateur (ce qui vous arrivera extr√™mement rarement), l'id√©e est tout de m√™me d'aider le d√©veloppeur :

```bash
Compiling ...elm-0.19.1-beta-1-linux: ./Data/Vector/Generic/Mutable.hs:703 (modify): index out of bounds (3,3) 
CallStack (from HasCallStack): 
 error, called at ./Data/Vector/Internal/Check.hs:87:5 in vector-0.12.0.3- 028020653d7b6942874e2f105e314b1f8fd65010ca5f2ea9562b9a08a2bc03f9:Data.Vector.Internal.Check 

-- ERROR ---------------------------------------------

I ran into something that bypassed the normal error reporting process! I extracted whatever information I could from the internal error: 

> thread blocked indefinitely in an MVar operation 

These errors are usually pretty confusing, so start by asking around on one of forums listed at https://elm-lang.org/community to see if anyone can get you unstuck quickly. 

-- REQUEST -------------------------------------------

If you are feeling up to it, please try to get your code down to the smallest version that still triggers this message. Ideally in a single Main.elm and elm.json file. 

From there open a NEW issue at https://github.com/elm/compiler/issues with your reduced example pasted in directly. (Not a link to a repo or gist!) Do not worry about if someone else saw something similar. More examples is better! 

This kind of error is usually tied up in larger architectural choices that are hard to change, so even when we have a couple good examples, it can take some time to resolve in a solid way.
```

## Simplicit√© de l'√©cosyst√®me

L√† o√π *npm* s'impose comme le gestionnaire de paquets contenant le plus de modules, les packages Elm se comptent *uniquement* en centaines. Souvent il y a un module standard pour ce que l'on cherche √† faire et le choix est donc rapide. Je n'ai personnellement jamais √©t√© bloqu√© par l'indisponibilit√© d'un package, notamment parce qu'il est en g√©n√©ral facile d'utiliser √©galement des modules JavaScript √† travers [les ports en Elm](https://guide.elm-lang.org/interop/ports.html).

Et une cat√©gorie se d√©tache plus particuli√®rement, celle des packages li√©s √† la gestion d'√©tat ! En React il y a toujours un stade o√π il va falloir choisir entre Redux, MobX, gestion maison ou autre solution de gestion d'√©tat plus ou moins d√©riv√©e de Flux. En Elm c'est plus simple : le langage g√®re directement l'√©tat de l'application √† travers la Elm Architecture, tr√®s proche de Redux. Et pour cause ! [Le cr√©ateur de Redux a en effet cr√©√© celui-ci en s'inspirant de Elm](https://redux.js.org/introduction/prior-art#elm). √âtant int√©gr√©e directement dans le langage, son utilisation en Elm est d'ailleurs tr√®s intuitive.

On se pose donc au final tr√®s peu de questions en d√©but de projet : on utilise ce langage framework et des packages utilis√©s par quasiment tous les projets Elm, sans devoir choisir entre de nombreuses solutions diff√©rentes. C'est pour moi l'un des inconv√©nients de React pour des √©quipes peu exp√©riment√©es : comme la biblioth√®que couvre en elle-m√™me peu de domaines, il faut choisir entre pas mal de solutions des choses comme la gestion d'√©tat, les requ√™tes HTTP, etc.

## Simplicit√© du refactoring

Comme dit plus t√¥t, l'une des grandes forces de Elm est son compilateur. La seconde grande force de Elm est son absence d'erreur au runtime, et elle est directement li√©e √† la premi√®re. Oui, vous avez bien lu ! En Elm, on consid√®re qu'un code qui compile ne va pas planter en production, et c'est effectivement ce qui se produit en r√©alit√©. Voyez par exemple ce graphique, montrant les erreurs en production sur le site de NoRedInk sur 3 ans group√©es selon qu'elles proviennent de leur code Elm (200 000 lignes de code) ou de leur code JavaScript (17 000 lignes, soit 11 fois moins !) :

<div style="text-align: center">  
    <img src="/images/noredink-js-elm-errors.png" alt="Ce graphique montre environ 60 000 erreurs JavaScript contre aucune erreur Elm affich√©e" style="max-width: 100%; width: 600px">
</div>

C√¥t√© Elm, m√™me si on ne voit pas la courbe, il y a environ une dizaine d'erreurs. En effet, dans les versions pr√©c√©dentes du langage, il √©tait possible pour un cas juger impossible de demander √† l'application de se crasher. Et un jour un d√©veloppeur s'est tromp√©... Cela n'est aujourd'hui m√™me plus possible avec les nouvelles versions du langage !

Pour en revenir √† cette conclusion toute simple : en Elm, quand √ßa compile, √ßa marche ! Du coup les refactoring deviennent tr√®s agr√©ables : on commence par faire un petit changement dans le code, puis le compilateur va nous guider pour savoir ce que l'on doit changer. Rappelez-vous : ses erreurs sont tr√®s facilement compr√©hensibles. Et une fois que cela compile, notre refactoring est termin√© ! 

Il devient alors tr√®s facile de modifier du code Elm, √† tel point qu'on peut repousser les d√©cisions √† plus tard. Par exemple, nul besoin de choisir imm√©diatement l'architecture de vos fichiers : vous pouvez commencer avec un seul fichier, et le jour o√π √ßa devient trop p√©nible le split est facile (c'est souvent une simple histoire de copier/coller, comme en Elm tout est pur !).

De m√™me, pas besoin de se lancer dans des abstractions hasardeuses, on peut d√©cider d'attendre d'avoir plus de connaissance du m√©tier / projet avant de r√©√©crire certaines parties du code, avec l'assurance qu'on ne va rien oublier. 

Cette s√©r√©nit√© qu'apporte le langage retire toute peur de livrer en production un bug cach√© parce qu'on a *oubli√©* de penser √† certains cas !

## Simplicit√© des d√©pendances

R√©guli√®rement, on peut voir passer des vuln√©rabilit√©s dans les packages publi√©s sur *npm*. D'o√π que viennent ces failles (*npm*, erreur humaine, faille technique, ...), le fait est qu'il appara√Æt dangereux d'ajouter une d√©pendance √† son projet sans v√©rifier tr√®s attentivement sa fiabilit√©. Et pour cela, il n'existe pas de m√©trique pr√©cise : doit-on regarder le nombre de personnes l'utilisant, la fr√©quence des mises √† jour, la c√©l√©brit√© de l'auteur, le code source directement ?

Et une d√©pendance innocente peut en tirer une autre qui, elle, peut l'√™tre moins ! La philosophie "publiez et importez  des centaines de petit packages sp√©cialis√©s pour √©viter de refaire la roue" de *npm* encourage malheureusement les arbres de d√©pendance profonds et il est tr√®s compliqu√© de pouvoir contr√¥ler exactement ce qu'on rajoute √† son projet.

Elm est diff√©rent dans le sens o√π les d√©pendances pr√©sentent bien moins de risques. La raison est simple : le langage est plus strict dans sa syntaxe, notamment dans sa gestion des effets secondaires. Par *effet secondaire*, je parle ici de tout ce qui peut impacter l'ext√©rieur d'un programme : les requ√™tes HTTP, l'acc√®s aux cookies, le DOM, etc. Et c'est justement via ces effets  secondaires que proviennent la plupart des vuln√©rabilit√©s ! 

En Elm, si un package install√© d√©sire utiliser une de ces fonctionnalit√©s, cela est forc√©ment explicite et le d√©veloppeur ne peut pas l'ignorer. On sait donc quand il faut se m√©fier et o√π regarder pr√©cis√©ment. De m√™me, l'arbre de d√©pendances reste relativement plat et compr√©hensible.

Un autre aspect qui peut rebuter concerne la taille des d√©pendances. Un des conseils les plus donn√©s est de ne "pas ajouter toute une biblioth√®que si on n'en utilise qu'une fonction ou deux". En effet, la nature dynamique de JavaScript rend compliqu√© le *tree-shaking* (la suppression automatique du code non utilis√© lors du build), m√™me si cet aspect a √©t√© quelque peu am√©lior√© avec les modules ES6 qui peut maintenant le faire √† l'√©chelle du fichier. Elm ‚Äì lui ‚Äì b√©n√©ficie de sa nature statique et permet d'effectuer du tree-shaking √† l'√©chelle de la fonction. On n'h√©site donc pas √† rajouter une d√©pendance lorsqu'on n'en n'utilise qu'une petite partie."""
