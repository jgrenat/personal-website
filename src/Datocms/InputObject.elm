-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Datocms.InputObject exposing (..)

import Datocms.Enum.ColorBucketType
import Datocms.Enum.ImgixParamsAuto
import Datocms.Enum.ImgixParamsBlendAlign
import Datocms.Enum.ImgixParamsBlendCrop
import Datocms.Enum.ImgixParamsBlendFit
import Datocms.Enum.ImgixParamsBlendMode
import Datocms.Enum.ImgixParamsBlendSize
import Datocms.Enum.ImgixParamsCh
import Datocms.Enum.ImgixParamsCrop
import Datocms.Enum.ImgixParamsCs
import Datocms.Enum.ImgixParamsFill
import Datocms.Enum.ImgixParamsFit
import Datocms.Enum.ImgixParamsFlip
import Datocms.Enum.ImgixParamsFm
import Datocms.Enum.ImgixParamsMarkAlign
import Datocms.Enum.ImgixParamsMarkFit
import Datocms.Enum.ImgixParamsPalette
import Datocms.Enum.ImgixParamsTransparency
import Datocms.Enum.ImgixParamsTrim
import Datocms.Enum.ImgixParamsTxtAlign
import Datocms.Enum.ImgixParamsTxtClip
import Datocms.Enum.ImgixParamsTxtFit
import Datocms.Enum.ItemStatus
import Datocms.Enum.ResolutionType
import Datocms.Enum.UploadOrientation
import Datocms.Enum.UploadType
import Datocms.Interface
import Datocms.Object
import Datocms.Scalar
import Datocms.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode
import ScalarCodecs


buildArticleModelFilter :
    (ArticleModelFilterOptionalFields -> ArticleModelFilterOptionalFields)
    -> ArticleModelFilter
buildArticleModelFilter fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { createdAt_ = Absent, createdAt = Absent, id = Absent, firstPublishedAt_ = Absent, publicationScheduledAt_ = Absent, unpublishingScheduledAt_ = Absent, publishedAt_ = Absent, status_ = Absent, updatedAt_ = Absent, updatedAt = Absent, isValid_ = Absent, description = Absent, banner = Absent, content = Absent, slug = Absent, name = Absent, or = Absent }
    in
    ArticleModelFilter { createdAt_ = optionals____.createdAt_, createdAt = optionals____.createdAt, id = optionals____.id, firstPublishedAt_ = optionals____.firstPublishedAt_, publicationScheduledAt_ = optionals____.publicationScheduledAt_, unpublishingScheduledAt_ = optionals____.unpublishingScheduledAt_, publishedAt_ = optionals____.publishedAt_, status_ = optionals____.status_, updatedAt_ = optionals____.updatedAt_, updatedAt = optionals____.updatedAt, isValid_ = optionals____.isValid_, description = optionals____.description, banner = optionals____.banner, content = optionals____.content, slug = optionals____.slug, name = optionals____.name, or = optionals____.or }


type alias ArticleModelFilterOptionalFields =
    { createdAt_ : OptionalArgument CreatedAtFilter
    , createdAt : OptionalArgument CreatedAtFilter
    , id : OptionalArgument ItemIdFilter
    , firstPublishedAt_ : OptionalArgument PublishedAtFilter
    , publicationScheduledAt_ : OptionalArgument PublishedAtFilter
    , unpublishingScheduledAt_ : OptionalArgument PublishedAtFilter
    , publishedAt_ : OptionalArgument PublishedAtFilter
    , status_ : OptionalArgument StatusFilter
    , updatedAt_ : OptionalArgument UpdatedAtFilter
    , updatedAt : OptionalArgument UpdatedAtFilter
    , isValid_ : OptionalArgument BooleanFilter
    , description : OptionalArgument TextFilter
    , banner : OptionalArgument FileFilter
    , content : OptionalArgument StructuredTextFilter
    , slug : OptionalArgument SlugFilter
    , name : OptionalArgument StringFilter
    , or : OptionalArgument (List (Maybe ArticleModelFilter))
    }


{-| Type alias for the `ArticleModelFilter` attributes. Note that this type
needs to use the `ArticleModelFilter` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias ArticleModelFilterRaw =
    { createdAt_ : OptionalArgument CreatedAtFilter
    , createdAt : OptionalArgument CreatedAtFilter
    , id : OptionalArgument ItemIdFilter
    , firstPublishedAt_ : OptionalArgument PublishedAtFilter
    , publicationScheduledAt_ : OptionalArgument PublishedAtFilter
    , unpublishingScheduledAt_ : OptionalArgument PublishedAtFilter
    , publishedAt_ : OptionalArgument PublishedAtFilter
    , status_ : OptionalArgument StatusFilter
    , updatedAt_ : OptionalArgument UpdatedAtFilter
    , updatedAt : OptionalArgument UpdatedAtFilter
    , isValid_ : OptionalArgument BooleanFilter
    , description : OptionalArgument TextFilter
    , banner : OptionalArgument FileFilter
    , content : OptionalArgument StructuredTextFilter
    , slug : OptionalArgument SlugFilter
    , name : OptionalArgument StringFilter
    , or : OptionalArgument (List (Maybe ArticleModelFilter))
    }


{-| Type for the ArticleModelFilter input object.
-}
type ArticleModelFilter
    = ArticleModelFilter ArticleModelFilterRaw


{-| Encode a ArticleModelFilter into a value that can be used as an argument.
-}
encodeArticleModelFilter : ArticleModelFilter -> Value
encodeArticleModelFilter (ArticleModelFilter input____) =
    Encode.maybeObject
        [ ( "_createdAt", encodeCreatedAtFilter |> Encode.optional input____.createdAt_ ), ( "createdAt", encodeCreatedAtFilter |> Encode.optional input____.createdAt ), ( "id", encodeItemIdFilter |> Encode.optional input____.id ), ( "_firstPublishedAt", encodePublishedAtFilter |> Encode.optional input____.firstPublishedAt_ ), ( "_publicationScheduledAt", encodePublishedAtFilter |> Encode.optional input____.publicationScheduledAt_ ), ( "_unpublishingScheduledAt", encodePublishedAtFilter |> Encode.optional input____.unpublishingScheduledAt_ ), ( "_publishedAt", encodePublishedAtFilter |> Encode.optional input____.publishedAt_ ), ( "_status", encodeStatusFilter |> Encode.optional input____.status_ ), ( "_updatedAt", encodeUpdatedAtFilter |> Encode.optional input____.updatedAt_ ), ( "updatedAt", encodeUpdatedAtFilter |> Encode.optional input____.updatedAt ), ( "_isValid", encodeBooleanFilter |> Encode.optional input____.isValid_ ), ( "description", encodeTextFilter |> Encode.optional input____.description ), ( "banner", encodeFileFilter |> Encode.optional input____.banner ), ( "content", encodeStructuredTextFilter |> Encode.optional input____.content ), ( "slug", encodeSlugFilter |> Encode.optional input____.slug ), ( "name", encodeStringFilter |> Encode.optional input____.name ), ( "OR", (encodeArticleModelFilter |> Encode.maybe |> Encode.list) |> Encode.optional input____.or ) ]


buildBooleanFilter :
    (BooleanFilterOptionalFields -> BooleanFilterOptionalFields)
    -> BooleanFilter
buildBooleanFilter fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { eq = Absent }
    in
    { eq = optionals____.eq }


type alias BooleanFilterOptionalFields =
    { eq : OptionalArgument ScalarCodecs.BooleanType }


{-| Type for the BooleanFilter input object.
-}
type alias BooleanFilter =
    { eq : OptionalArgument ScalarCodecs.BooleanType }


{-| Encode a BooleanFilter into a value that can be used as an argument.
-}
encodeBooleanFilter : BooleanFilter -> Value
encodeBooleanFilter input____ =
    Encode.maybeObject
        [ ( "eq", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecBooleanType) |> Encode.optional input____.eq ) ]


buildCreatedAtFilter :
    (CreatedAtFilterOptionalFields -> CreatedAtFilterOptionalFields)
    -> CreatedAtFilter
buildCreatedAtFilter fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { gt = Absent, lt = Absent, gte = Absent, lte = Absent, exists = Absent, eq = Absent, neq = Absent }
    in
    { gt = optionals____.gt, lt = optionals____.lt, gte = optionals____.gte, lte = optionals____.lte, exists = optionals____.exists, eq = optionals____.eq, neq = optionals____.neq }


type alias CreatedAtFilterOptionalFields =
    { gt : OptionalArgument ScalarCodecs.DateTime
    , lt : OptionalArgument ScalarCodecs.DateTime
    , gte : OptionalArgument ScalarCodecs.DateTime
    , lte : OptionalArgument ScalarCodecs.DateTime
    , exists : OptionalArgument ScalarCodecs.BooleanType
    , eq : OptionalArgument ScalarCodecs.DateTime
    , neq : OptionalArgument ScalarCodecs.DateTime
    }


{-| Type for the CreatedAtFilter input object.
-}
type alias CreatedAtFilter =
    { gt : OptionalArgument ScalarCodecs.DateTime
    , lt : OptionalArgument ScalarCodecs.DateTime
    , gte : OptionalArgument ScalarCodecs.DateTime
    , lte : OptionalArgument ScalarCodecs.DateTime
    , exists : OptionalArgument ScalarCodecs.BooleanType
    , eq : OptionalArgument ScalarCodecs.DateTime
    , neq : OptionalArgument ScalarCodecs.DateTime
    }


{-| Encode a CreatedAtFilter into a value that can be used as an argument.
-}
encodeCreatedAtFilter : CreatedAtFilter -> Value
encodeCreatedAtFilter input____ =
    Encode.maybeObject
        [ ( "gt", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input____.gt ), ( "lt", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input____.lt ), ( "gte", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input____.gte ), ( "lte", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input____.lte ), ( "exists", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecBooleanType) |> Encode.optional input____.exists ), ( "eq", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input____.eq ), ( "neq", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input____.neq ) ]


buildFileFilter :
    (FileFilterOptionalFields -> FileFilterOptionalFields)
    -> FileFilter
buildFileFilter fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { eq = Absent, neq = Absent, in_ = Absent, notIn = Absent, exists = Absent }
    in
    { eq = optionals____.eq, neq = optionals____.neq, in_ = optionals____.in_, notIn = optionals____.notIn, exists = optionals____.exists }


type alias FileFilterOptionalFields =
    { eq : OptionalArgument ScalarCodecs.UploadId
    , neq : OptionalArgument ScalarCodecs.UploadId
    , in_ : OptionalArgument (List (Maybe ScalarCodecs.UploadId))
    , notIn : OptionalArgument (List (Maybe ScalarCodecs.UploadId))
    , exists : OptionalArgument ScalarCodecs.BooleanType
    }


{-| Type for the FileFilter input object.
-}
type alias FileFilter =
    { eq : OptionalArgument ScalarCodecs.UploadId
    , neq : OptionalArgument ScalarCodecs.UploadId
    , in_ : OptionalArgument (List (Maybe ScalarCodecs.UploadId))
    , notIn : OptionalArgument (List (Maybe ScalarCodecs.UploadId))
    , exists : OptionalArgument ScalarCodecs.BooleanType
    }


{-| Encode a FileFilter into a value that can be used as an argument.
-}
encodeFileFilter : FileFilter -> Value
encodeFileFilter input____ =
    Encode.maybeObject
        [ ( "eq", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecUploadId) |> Encode.optional input____.eq ), ( "neq", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecUploadId) |> Encode.optional input____.neq ), ( "in", ((ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecUploadId) |> Encode.maybe |> Encode.list) |> Encode.optional input____.in_ ), ( "notIn", ((ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecUploadId) |> Encode.maybe |> Encode.list) |> Encode.optional input____.notIn ), ( "exists", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecBooleanType) |> Encode.optional input____.exists ) ]


buildImgixParams :
    (ImgixParamsOptionalFields -> ImgixParamsOptionalFields)
    -> ImgixParams
buildImgixParams fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { ar = Absent, auto = Absent, bg = Absent, blendAlign = Absent, blendAlpha = Absent, blendColor = Absent, blendCrop = Absent, blendFit = Absent, blendH = Absent, blendMode = Absent, blendPad = Absent, blendSize = Absent, blendW = Absent, blendX = Absent, blendY = Absent, blend = Absent, blur = Absent, borderBottom = Absent, borderLeft = Absent, borderRadiusInner = Absent, borderRadius = Absent, borderRight = Absent, borderTop = Absent, border = Absent, bri = Absent, ch = Absent, chromasub = Absent, colorquant = Absent, colors = Absent, con = Absent, cornerRadius = Absent, crop = Absent, cs = Absent, dl = Absent, dpi = Absent, dpr = Absent, duotoneAlpha = Absent, duotone = Absent, exp = Absent, expires = Absent, faceindex = Absent, facepad = Absent, faces = Absent, fillColor = Absent, fill = Absent, fit = Absent, flip = Absent, fm = Absent, fpDebug = Absent, fpX = Absent, fpY = Absent, fpZ = Absent, gam = Absent, gridColors = Absent, gridSize = Absent, h = Absent, high = Absent, htn = Absent, hue = Absent, invert = Absent, lossless = Absent, markAlign = Absent, markAlpha = Absent, markBase = Absent, markFit = Absent, markH = Absent, markPad = Absent, markScale = Absent, markW = Absent, markX = Absent, markY = Absent, mark = Absent, maskBg = Absent, mask = Absent, maxH = Absent, maxW = Absent, minH = Absent, minW = Absent, monochrome = Absent, nr = Absent, nrs = Absent, orient = Absent, padBottom = Absent, padLeft = Absent, padRight = Absent, padTop = Absent, pad = Absent, page = Absent, palette = Absent, prefix = Absent, px = Absent, q = Absent, rect = Absent, rot = Absent, sat = Absent, sepia = Absent, shad = Absent, sharp = Absent, transparency = Absent, trimColor = Absent, trimMd = Absent, trimPad = Absent, trimSd = Absent, trimTol = Absent, trim = Absent, txtAlign = Absent, txtClip = Absent, txtColor = Absent, txtFit = Absent, txtFont = Absent, txtLead = Absent, txtLig = Absent, txtLineColor = Absent, txtLine = Absent, txtPad = Absent, txtShad = Absent, txtSize = Absent, txtTrack = Absent, txtWidth = Absent, txt = Absent, usm = Absent, usmrad = Absent, vib = Absent, w = Absent }
    in
    { ar = optionals____.ar, auto = optionals____.auto, bg = optionals____.bg, blendAlign = optionals____.blendAlign, blendAlpha = optionals____.blendAlpha, blendColor = optionals____.blendColor, blendCrop = optionals____.blendCrop, blendFit = optionals____.blendFit, blendH = optionals____.blendH, blendMode = optionals____.blendMode, blendPad = optionals____.blendPad, blendSize = optionals____.blendSize, blendW = optionals____.blendW, blendX = optionals____.blendX, blendY = optionals____.blendY, blend = optionals____.blend, blur = optionals____.blur, borderBottom = optionals____.borderBottom, borderLeft = optionals____.borderLeft, borderRadiusInner = optionals____.borderRadiusInner, borderRadius = optionals____.borderRadius, borderRight = optionals____.borderRight, borderTop = optionals____.borderTop, border = optionals____.border, bri = optionals____.bri, ch = optionals____.ch, chromasub = optionals____.chromasub, colorquant = optionals____.colorquant, colors = optionals____.colors, con = optionals____.con, cornerRadius = optionals____.cornerRadius, crop = optionals____.crop, cs = optionals____.cs, dl = optionals____.dl, dpi = optionals____.dpi, dpr = optionals____.dpr, duotoneAlpha = optionals____.duotoneAlpha, duotone = optionals____.duotone, exp = optionals____.exp, expires = optionals____.expires, faceindex = optionals____.faceindex, facepad = optionals____.facepad, faces = optionals____.faces, fillColor = optionals____.fillColor, fill = optionals____.fill, fit = optionals____.fit, flip = optionals____.flip, fm = optionals____.fm, fpDebug = optionals____.fpDebug, fpX = optionals____.fpX, fpY = optionals____.fpY, fpZ = optionals____.fpZ, gam = optionals____.gam, gridColors = optionals____.gridColors, gridSize = optionals____.gridSize, h = optionals____.h, high = optionals____.high, htn = optionals____.htn, hue = optionals____.hue, invert = optionals____.invert, lossless = optionals____.lossless, markAlign = optionals____.markAlign, markAlpha = optionals____.markAlpha, markBase = optionals____.markBase, markFit = optionals____.markFit, markH = optionals____.markH, markPad = optionals____.markPad, markScale = optionals____.markScale, markW = optionals____.markW, markX = optionals____.markX, markY = optionals____.markY, mark = optionals____.mark, maskBg = optionals____.maskBg, mask = optionals____.mask, maxH = optionals____.maxH, maxW = optionals____.maxW, minH = optionals____.minH, minW = optionals____.minW, monochrome = optionals____.monochrome, nr = optionals____.nr, nrs = optionals____.nrs, orient = optionals____.orient, padBottom = optionals____.padBottom, padLeft = optionals____.padLeft, padRight = optionals____.padRight, padTop = optionals____.padTop, pad = optionals____.pad, page = optionals____.page, palette = optionals____.palette, prefix = optionals____.prefix, px = optionals____.px, q = optionals____.q, rect = optionals____.rect, rot = optionals____.rot, sat = optionals____.sat, sepia = optionals____.sepia, shad = optionals____.shad, sharp = optionals____.sharp, transparency = optionals____.transparency, trimColor = optionals____.trimColor, trimMd = optionals____.trimMd, trimPad = optionals____.trimPad, trimSd = optionals____.trimSd, trimTol = optionals____.trimTol, trim = optionals____.trim, txtAlign = optionals____.txtAlign, txtClip = optionals____.txtClip, txtColor = optionals____.txtColor, txtFit = optionals____.txtFit, txtFont = optionals____.txtFont, txtLead = optionals____.txtLead, txtLig = optionals____.txtLig, txtLineColor = optionals____.txtLineColor, txtLine = optionals____.txtLine, txtPad = optionals____.txtPad, txtShad = optionals____.txtShad, txtSize = optionals____.txtSize, txtTrack = optionals____.txtTrack, txtWidth = optionals____.txtWidth, txt = optionals____.txt, usm = optionals____.usm, usmrad = optionals____.usmrad, vib = optionals____.vib, w = optionals____.w }


type alias ImgixParamsOptionalFields =
    { ar : OptionalArgument String
    , auto : OptionalArgument (List Datocms.Enum.ImgixParamsAuto.ImgixParamsAuto)
    , bg : OptionalArgument String
    , blendAlign : OptionalArgument (List Datocms.Enum.ImgixParamsBlendAlign.ImgixParamsBlendAlign)
    , blendAlpha : OptionalArgument ScalarCodecs.IntType
    , blendColor : OptionalArgument String
    , blendCrop : OptionalArgument (List Datocms.Enum.ImgixParamsBlendCrop.ImgixParamsBlendCrop)
    , blendFit : OptionalArgument Datocms.Enum.ImgixParamsBlendFit.ImgixParamsBlendFit
    , blendH : OptionalArgument ScalarCodecs.FloatType
    , blendMode : OptionalArgument Datocms.Enum.ImgixParamsBlendMode.ImgixParamsBlendMode
    , blendPad : OptionalArgument ScalarCodecs.IntType
    , blendSize : OptionalArgument Datocms.Enum.ImgixParamsBlendSize.ImgixParamsBlendSize
    , blendW : OptionalArgument ScalarCodecs.FloatType
    , blendX : OptionalArgument ScalarCodecs.IntType
    , blendY : OptionalArgument ScalarCodecs.IntType
    , blend : OptionalArgument String
    , blur : OptionalArgument ScalarCodecs.IntType
    , borderBottom : OptionalArgument ScalarCodecs.IntType
    , borderLeft : OptionalArgument ScalarCodecs.IntType
    , borderRadiusInner : OptionalArgument String
    , borderRadius : OptionalArgument String
    , borderRight : OptionalArgument ScalarCodecs.IntType
    , borderTop : OptionalArgument ScalarCodecs.IntType
    , border : OptionalArgument String
    , bri : OptionalArgument ScalarCodecs.IntType
    , ch : OptionalArgument (List Datocms.Enum.ImgixParamsCh.ImgixParamsCh)
    , chromasub : OptionalArgument ScalarCodecs.IntType
    , colorquant : OptionalArgument ScalarCodecs.IntType
    , colors : OptionalArgument ScalarCodecs.IntType
    , con : OptionalArgument ScalarCodecs.IntType
    , cornerRadius : OptionalArgument String
    , crop : OptionalArgument (List Datocms.Enum.ImgixParamsCrop.ImgixParamsCrop)
    , cs : OptionalArgument Datocms.Enum.ImgixParamsCs.ImgixParamsCs
    , dl : OptionalArgument String
    , dpi : OptionalArgument ScalarCodecs.IntType
    , dpr : OptionalArgument ScalarCodecs.FloatType
    , duotoneAlpha : OptionalArgument ScalarCodecs.IntType
    , duotone : OptionalArgument String
    , exp : OptionalArgument ScalarCodecs.IntType
    , expires : OptionalArgument ScalarCodecs.IntType
    , faceindex : OptionalArgument ScalarCodecs.IntType
    , facepad : OptionalArgument ScalarCodecs.FloatType
    , faces : OptionalArgument ScalarCodecs.IntType
    , fillColor : OptionalArgument String
    , fill : OptionalArgument Datocms.Enum.ImgixParamsFill.ImgixParamsFill
    , fit : OptionalArgument Datocms.Enum.ImgixParamsFit.ImgixParamsFit
    , flip : OptionalArgument Datocms.Enum.ImgixParamsFlip.ImgixParamsFlip
    , fm : OptionalArgument Datocms.Enum.ImgixParamsFm.ImgixParamsFm
    , fpDebug : OptionalArgument ScalarCodecs.BooleanType
    , fpX : OptionalArgument ScalarCodecs.FloatType
    , fpY : OptionalArgument ScalarCodecs.FloatType
    , fpZ : OptionalArgument ScalarCodecs.IntType
    , gam : OptionalArgument ScalarCodecs.IntType
    , gridColors : OptionalArgument String
    , gridSize : OptionalArgument ScalarCodecs.IntType
    , h : OptionalArgument ScalarCodecs.FloatType
    , high : OptionalArgument ScalarCodecs.IntType
    , htn : OptionalArgument ScalarCodecs.IntType
    , hue : OptionalArgument ScalarCodecs.IntType
    , invert : OptionalArgument ScalarCodecs.BooleanType
    , lossless : OptionalArgument ScalarCodecs.BooleanType
    , markAlign : OptionalArgument (List Datocms.Enum.ImgixParamsMarkAlign.ImgixParamsMarkAlign)
    , markAlpha : OptionalArgument ScalarCodecs.IntType
    , markBase : OptionalArgument String
    , markFit : OptionalArgument Datocms.Enum.ImgixParamsMarkFit.ImgixParamsMarkFit
    , markH : OptionalArgument ScalarCodecs.FloatType
    , markPad : OptionalArgument ScalarCodecs.IntType
    , markScale : OptionalArgument ScalarCodecs.IntType
    , markW : OptionalArgument ScalarCodecs.FloatType
    , markX : OptionalArgument ScalarCodecs.IntType
    , markY : OptionalArgument ScalarCodecs.IntType
    , mark : OptionalArgument String
    , maskBg : OptionalArgument String
    , mask : OptionalArgument String
    , maxH : OptionalArgument ScalarCodecs.IntType
    , maxW : OptionalArgument ScalarCodecs.IntType
    , minH : OptionalArgument ScalarCodecs.IntType
    , minW : OptionalArgument ScalarCodecs.IntType
    , monochrome : OptionalArgument String
    , nr : OptionalArgument ScalarCodecs.IntType
    , nrs : OptionalArgument ScalarCodecs.IntType
    , orient : OptionalArgument ScalarCodecs.IntType
    , padBottom : OptionalArgument ScalarCodecs.IntType
    , padLeft : OptionalArgument ScalarCodecs.IntType
    , padRight : OptionalArgument ScalarCodecs.IntType
    , padTop : OptionalArgument ScalarCodecs.IntType
    , pad : OptionalArgument ScalarCodecs.IntType
    , page : OptionalArgument ScalarCodecs.IntType
    , palette : OptionalArgument Datocms.Enum.ImgixParamsPalette.ImgixParamsPalette
    , prefix : OptionalArgument String
    , px : OptionalArgument ScalarCodecs.IntType
    , q : OptionalArgument ScalarCodecs.IntType
    , rect : OptionalArgument String
    , rot : OptionalArgument ScalarCodecs.FloatType
    , sat : OptionalArgument ScalarCodecs.IntType
    , sepia : OptionalArgument ScalarCodecs.IntType
    , shad : OptionalArgument ScalarCodecs.FloatType
    , sharp : OptionalArgument ScalarCodecs.FloatType
    , transparency : OptionalArgument Datocms.Enum.ImgixParamsTransparency.ImgixParamsTransparency
    , trimColor : OptionalArgument String
    , trimMd : OptionalArgument ScalarCodecs.FloatType
    , trimPad : OptionalArgument ScalarCodecs.IntType
    , trimSd : OptionalArgument ScalarCodecs.FloatType
    , trimTol : OptionalArgument ScalarCodecs.FloatType
    , trim : OptionalArgument Datocms.Enum.ImgixParamsTrim.ImgixParamsTrim
    , txtAlign : OptionalArgument (List Datocms.Enum.ImgixParamsTxtAlign.ImgixParamsTxtAlign)
    , txtClip : OptionalArgument (List Datocms.Enum.ImgixParamsTxtClip.ImgixParamsTxtClip)
    , txtColor : OptionalArgument String
    , txtFit : OptionalArgument Datocms.Enum.ImgixParamsTxtFit.ImgixParamsTxtFit
    , txtFont : OptionalArgument String
    , txtLead : OptionalArgument ScalarCodecs.IntType
    , txtLig : OptionalArgument ScalarCodecs.IntType
    , txtLineColor : OptionalArgument String
    , txtLine : OptionalArgument ScalarCodecs.IntType
    , txtPad : OptionalArgument ScalarCodecs.IntType
    , txtShad : OptionalArgument ScalarCodecs.FloatType
    , txtSize : OptionalArgument ScalarCodecs.IntType
    , txtTrack : OptionalArgument ScalarCodecs.IntType
    , txtWidth : OptionalArgument ScalarCodecs.IntType
    , txt : OptionalArgument String
    , usm : OptionalArgument ScalarCodecs.IntType
    , usmrad : OptionalArgument ScalarCodecs.FloatType
    , vib : OptionalArgument ScalarCodecs.IntType
    , w : OptionalArgument ScalarCodecs.FloatType
    }


{-| Type for the ImgixParams input object.
-}
type alias ImgixParams =
    { ar : OptionalArgument String
    , auto : OptionalArgument (List Datocms.Enum.ImgixParamsAuto.ImgixParamsAuto)
    , bg : OptionalArgument String
    , blendAlign : OptionalArgument (List Datocms.Enum.ImgixParamsBlendAlign.ImgixParamsBlendAlign)
    , blendAlpha : OptionalArgument ScalarCodecs.IntType
    , blendColor : OptionalArgument String
    , blendCrop : OptionalArgument (List Datocms.Enum.ImgixParamsBlendCrop.ImgixParamsBlendCrop)
    , blendFit : OptionalArgument Datocms.Enum.ImgixParamsBlendFit.ImgixParamsBlendFit
    , blendH : OptionalArgument ScalarCodecs.FloatType
    , blendMode : OptionalArgument Datocms.Enum.ImgixParamsBlendMode.ImgixParamsBlendMode
    , blendPad : OptionalArgument ScalarCodecs.IntType
    , blendSize : OptionalArgument Datocms.Enum.ImgixParamsBlendSize.ImgixParamsBlendSize
    , blendW : OptionalArgument ScalarCodecs.FloatType
    , blendX : OptionalArgument ScalarCodecs.IntType
    , blendY : OptionalArgument ScalarCodecs.IntType
    , blend : OptionalArgument String
    , blur : OptionalArgument ScalarCodecs.IntType
    , borderBottom : OptionalArgument ScalarCodecs.IntType
    , borderLeft : OptionalArgument ScalarCodecs.IntType
    , borderRadiusInner : OptionalArgument String
    , borderRadius : OptionalArgument String
    , borderRight : OptionalArgument ScalarCodecs.IntType
    , borderTop : OptionalArgument ScalarCodecs.IntType
    , border : OptionalArgument String
    , bri : OptionalArgument ScalarCodecs.IntType
    , ch : OptionalArgument (List Datocms.Enum.ImgixParamsCh.ImgixParamsCh)
    , chromasub : OptionalArgument ScalarCodecs.IntType
    , colorquant : OptionalArgument ScalarCodecs.IntType
    , colors : OptionalArgument ScalarCodecs.IntType
    , con : OptionalArgument ScalarCodecs.IntType
    , cornerRadius : OptionalArgument String
    , crop : OptionalArgument (List Datocms.Enum.ImgixParamsCrop.ImgixParamsCrop)
    , cs : OptionalArgument Datocms.Enum.ImgixParamsCs.ImgixParamsCs
    , dl : OptionalArgument String
    , dpi : OptionalArgument ScalarCodecs.IntType
    , dpr : OptionalArgument ScalarCodecs.FloatType
    , duotoneAlpha : OptionalArgument ScalarCodecs.IntType
    , duotone : OptionalArgument String
    , exp : OptionalArgument ScalarCodecs.IntType
    , expires : OptionalArgument ScalarCodecs.IntType
    , faceindex : OptionalArgument ScalarCodecs.IntType
    , facepad : OptionalArgument ScalarCodecs.FloatType
    , faces : OptionalArgument ScalarCodecs.IntType
    , fillColor : OptionalArgument String
    , fill : OptionalArgument Datocms.Enum.ImgixParamsFill.ImgixParamsFill
    , fit : OptionalArgument Datocms.Enum.ImgixParamsFit.ImgixParamsFit
    , flip : OptionalArgument Datocms.Enum.ImgixParamsFlip.ImgixParamsFlip
    , fm : OptionalArgument Datocms.Enum.ImgixParamsFm.ImgixParamsFm
    , fpDebug : OptionalArgument ScalarCodecs.BooleanType
    , fpX : OptionalArgument ScalarCodecs.FloatType
    , fpY : OptionalArgument ScalarCodecs.FloatType
    , fpZ : OptionalArgument ScalarCodecs.IntType
    , gam : OptionalArgument ScalarCodecs.IntType
    , gridColors : OptionalArgument String
    , gridSize : OptionalArgument ScalarCodecs.IntType
    , h : OptionalArgument ScalarCodecs.FloatType
    , high : OptionalArgument ScalarCodecs.IntType
    , htn : OptionalArgument ScalarCodecs.IntType
    , hue : OptionalArgument ScalarCodecs.IntType
    , invert : OptionalArgument ScalarCodecs.BooleanType
    , lossless : OptionalArgument ScalarCodecs.BooleanType
    , markAlign : OptionalArgument (List Datocms.Enum.ImgixParamsMarkAlign.ImgixParamsMarkAlign)
    , markAlpha : OptionalArgument ScalarCodecs.IntType
    , markBase : OptionalArgument String
    , markFit : OptionalArgument Datocms.Enum.ImgixParamsMarkFit.ImgixParamsMarkFit
    , markH : OptionalArgument ScalarCodecs.FloatType
    , markPad : OptionalArgument ScalarCodecs.IntType
    , markScale : OptionalArgument ScalarCodecs.IntType
    , markW : OptionalArgument ScalarCodecs.FloatType
    , markX : OptionalArgument ScalarCodecs.IntType
    , markY : OptionalArgument ScalarCodecs.IntType
    , mark : OptionalArgument String
    , maskBg : OptionalArgument String
    , mask : OptionalArgument String
    , maxH : OptionalArgument ScalarCodecs.IntType
    , maxW : OptionalArgument ScalarCodecs.IntType
    , minH : OptionalArgument ScalarCodecs.IntType
    , minW : OptionalArgument ScalarCodecs.IntType
    , monochrome : OptionalArgument String
    , nr : OptionalArgument ScalarCodecs.IntType
    , nrs : OptionalArgument ScalarCodecs.IntType
    , orient : OptionalArgument ScalarCodecs.IntType
    , padBottom : OptionalArgument ScalarCodecs.IntType
    , padLeft : OptionalArgument ScalarCodecs.IntType
    , padRight : OptionalArgument ScalarCodecs.IntType
    , padTop : OptionalArgument ScalarCodecs.IntType
    , pad : OptionalArgument ScalarCodecs.IntType
    , page : OptionalArgument ScalarCodecs.IntType
    , palette : OptionalArgument Datocms.Enum.ImgixParamsPalette.ImgixParamsPalette
    , prefix : OptionalArgument String
    , px : OptionalArgument ScalarCodecs.IntType
    , q : OptionalArgument ScalarCodecs.IntType
    , rect : OptionalArgument String
    , rot : OptionalArgument ScalarCodecs.FloatType
    , sat : OptionalArgument ScalarCodecs.IntType
    , sepia : OptionalArgument ScalarCodecs.IntType
    , shad : OptionalArgument ScalarCodecs.FloatType
    , sharp : OptionalArgument ScalarCodecs.FloatType
    , transparency : OptionalArgument Datocms.Enum.ImgixParamsTransparency.ImgixParamsTransparency
    , trimColor : OptionalArgument String
    , trimMd : OptionalArgument ScalarCodecs.FloatType
    , trimPad : OptionalArgument ScalarCodecs.IntType
    , trimSd : OptionalArgument ScalarCodecs.FloatType
    , trimTol : OptionalArgument ScalarCodecs.FloatType
    , trim : OptionalArgument Datocms.Enum.ImgixParamsTrim.ImgixParamsTrim
    , txtAlign : OptionalArgument (List Datocms.Enum.ImgixParamsTxtAlign.ImgixParamsTxtAlign)
    , txtClip : OptionalArgument (List Datocms.Enum.ImgixParamsTxtClip.ImgixParamsTxtClip)
    , txtColor : OptionalArgument String
    , txtFit : OptionalArgument Datocms.Enum.ImgixParamsTxtFit.ImgixParamsTxtFit
    , txtFont : OptionalArgument String
    , txtLead : OptionalArgument ScalarCodecs.IntType
    , txtLig : OptionalArgument ScalarCodecs.IntType
    , txtLineColor : OptionalArgument String
    , txtLine : OptionalArgument ScalarCodecs.IntType
    , txtPad : OptionalArgument ScalarCodecs.IntType
    , txtShad : OptionalArgument ScalarCodecs.FloatType
    , txtSize : OptionalArgument ScalarCodecs.IntType
    , txtTrack : OptionalArgument ScalarCodecs.IntType
    , txtWidth : OptionalArgument ScalarCodecs.IntType
    , txt : OptionalArgument String
    , usm : OptionalArgument ScalarCodecs.IntType
    , usmrad : OptionalArgument ScalarCodecs.FloatType
    , vib : OptionalArgument ScalarCodecs.IntType
    , w : OptionalArgument ScalarCodecs.FloatType
    }


{-| Encode a ImgixParams into a value that can be used as an argument.
-}
encodeImgixParams : ImgixParams -> Value
encodeImgixParams input____ =
    Encode.maybeObject
        [ ( "ar", Encode.string |> Encode.optional input____.ar ), ( "auto", (Encode.enum Datocms.Enum.ImgixParamsAuto.toString |> Encode.list) |> Encode.optional input____.auto ), ( "bg", Encode.string |> Encode.optional input____.bg ), ( "blendAlign", (Encode.enum Datocms.Enum.ImgixParamsBlendAlign.toString |> Encode.list) |> Encode.optional input____.blendAlign ), ( "blendAlpha", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecIntType) |> Encode.optional input____.blendAlpha ), ( "blendColor", Encode.string |> Encode.optional input____.blendColor ), ( "blendCrop", (Encode.enum Datocms.Enum.ImgixParamsBlendCrop.toString |> Encode.list) |> Encode.optional input____.blendCrop ), ( "blendFit", Encode.enum Datocms.Enum.ImgixParamsBlendFit.toString |> Encode.optional input____.blendFit ), ( "blendH", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecFloatType) |> Encode.optional input____.blendH ), ( "blendMode", Encode.enum Datocms.Enum.ImgixParamsBlendMode.toString |> Encode.optional input____.blendMode ), ( "blendPad", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecIntType) |> Encode.optional input____.blendPad ), ( "blendSize", Encode.enum Datocms.Enum.ImgixParamsBlendSize.toString |> Encode.optional input____.blendSize ), ( "blendW", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecFloatType) |> Encode.optional input____.blendW ), ( "blendX", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecIntType) |> Encode.optional input____.blendX ), ( "blendY", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecIntType) |> Encode.optional input____.blendY ), ( "blend", Encode.string |> Encode.optional input____.blend ), ( "blur", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecIntType) |> Encode.optional input____.blur ), ( "borderBottom", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecIntType) |> Encode.optional input____.borderBottom ), ( "borderLeft", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecIntType) |> Encode.optional input____.borderLeft ), ( "borderRadiusInner", Encode.string |> Encode.optional input____.borderRadiusInner ), ( "borderRadius", Encode.string |> Encode.optional input____.borderRadius ), ( "borderRight", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecIntType) |> Encode.optional input____.borderRight ), ( "borderTop", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecIntType) |> Encode.optional input____.borderTop ), ( "border", Encode.string |> Encode.optional input____.border ), ( "bri", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecIntType) |> Encode.optional input____.bri ), ( "ch", (Encode.enum Datocms.Enum.ImgixParamsCh.toString |> Encode.list) |> Encode.optional input____.ch ), ( "chromasub", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecIntType) |> Encode.optional input____.chromasub ), ( "colorquant", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecIntType) |> Encode.optional input____.colorquant ), ( "colors", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecIntType) |> Encode.optional input____.colors ), ( "con", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecIntType) |> Encode.optional input____.con ), ( "cornerRadius", Encode.string |> Encode.optional input____.cornerRadius ), ( "crop", (Encode.enum Datocms.Enum.ImgixParamsCrop.toString |> Encode.list) |> Encode.optional input____.crop ), ( "cs", Encode.enum Datocms.Enum.ImgixParamsCs.toString |> Encode.optional input____.cs ), ( "dl", Encode.string |> Encode.optional input____.dl ), ( "dpi", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecIntType) |> Encode.optional input____.dpi ), ( "dpr", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecFloatType) |> Encode.optional input____.dpr ), ( "duotoneAlpha", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecIntType) |> Encode.optional input____.duotoneAlpha ), ( "duotone", Encode.string |> Encode.optional input____.duotone ), ( "exp", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecIntType) |> Encode.optional input____.exp ), ( "expires", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecIntType) |> Encode.optional input____.expires ), ( "faceindex", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecIntType) |> Encode.optional input____.faceindex ), ( "facepad", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecFloatType) |> Encode.optional input____.facepad ), ( "faces", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecIntType) |> Encode.optional input____.faces ), ( "fillColor", Encode.string |> Encode.optional input____.fillColor ), ( "fill", Encode.enum Datocms.Enum.ImgixParamsFill.toString |> Encode.optional input____.fill ), ( "fit", Encode.enum Datocms.Enum.ImgixParamsFit.toString |> Encode.optional input____.fit ), ( "flip", Encode.enum Datocms.Enum.ImgixParamsFlip.toString |> Encode.optional input____.flip ), ( "fm", Encode.enum Datocms.Enum.ImgixParamsFm.toString |> Encode.optional input____.fm ), ( "fpDebug", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecBooleanType) |> Encode.optional input____.fpDebug ), ( "fpX", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecFloatType) |> Encode.optional input____.fpX ), ( "fpY", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecFloatType) |> Encode.optional input____.fpY ), ( "fpZ", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecIntType) |> Encode.optional input____.fpZ ), ( "gam", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecIntType) |> Encode.optional input____.gam ), ( "gridColors", Encode.string |> Encode.optional input____.gridColors ), ( "gridSize", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecIntType) |> Encode.optional input____.gridSize ), ( "h", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecFloatType) |> Encode.optional input____.h ), ( "high", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecIntType) |> Encode.optional input____.high ), ( "htn", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecIntType) |> Encode.optional input____.htn ), ( "hue", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecIntType) |> Encode.optional input____.hue ), ( "invert", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecBooleanType) |> Encode.optional input____.invert ), ( "lossless", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecBooleanType) |> Encode.optional input____.lossless ), ( "markAlign", (Encode.enum Datocms.Enum.ImgixParamsMarkAlign.toString |> Encode.list) |> Encode.optional input____.markAlign ), ( "markAlpha", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecIntType) |> Encode.optional input____.markAlpha ), ( "markBase", Encode.string |> Encode.optional input____.markBase ), ( "markFit", Encode.enum Datocms.Enum.ImgixParamsMarkFit.toString |> Encode.optional input____.markFit ), ( "markH", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecFloatType) |> Encode.optional input____.markH ), ( "markPad", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecIntType) |> Encode.optional input____.markPad ), ( "markScale", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecIntType) |> Encode.optional input____.markScale ), ( "markW", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecFloatType) |> Encode.optional input____.markW ), ( "markX", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecIntType) |> Encode.optional input____.markX ), ( "markY", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecIntType) |> Encode.optional input____.markY ), ( "mark", Encode.string |> Encode.optional input____.mark ), ( "maskBg", Encode.string |> Encode.optional input____.maskBg ), ( "mask", Encode.string |> Encode.optional input____.mask ), ( "maxH", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecIntType) |> Encode.optional input____.maxH ), ( "maxW", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecIntType) |> Encode.optional input____.maxW ), ( "minH", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecIntType) |> Encode.optional input____.minH ), ( "minW", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecIntType) |> Encode.optional input____.minW ), ( "monochrome", Encode.string |> Encode.optional input____.monochrome ), ( "nr", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecIntType) |> Encode.optional input____.nr ), ( "nrs", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecIntType) |> Encode.optional input____.nrs ), ( "orient", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecIntType) |> Encode.optional input____.orient ), ( "padBottom", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecIntType) |> Encode.optional input____.padBottom ), ( "padLeft", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecIntType) |> Encode.optional input____.padLeft ), ( "padRight", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecIntType) |> Encode.optional input____.padRight ), ( "padTop", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecIntType) |> Encode.optional input____.padTop ), ( "pad", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecIntType) |> Encode.optional input____.pad ), ( "page", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecIntType) |> Encode.optional input____.page ), ( "palette", Encode.enum Datocms.Enum.ImgixParamsPalette.toString |> Encode.optional input____.palette ), ( "prefix", Encode.string |> Encode.optional input____.prefix ), ( "px", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecIntType) |> Encode.optional input____.px ), ( "q", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecIntType) |> Encode.optional input____.q ), ( "rect", Encode.string |> Encode.optional input____.rect ), ( "rot", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecFloatType) |> Encode.optional input____.rot ), ( "sat", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecIntType) |> Encode.optional input____.sat ), ( "sepia", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecIntType) |> Encode.optional input____.sepia ), ( "shad", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecFloatType) |> Encode.optional input____.shad ), ( "sharp", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecFloatType) |> Encode.optional input____.sharp ), ( "transparency", Encode.enum Datocms.Enum.ImgixParamsTransparency.toString |> Encode.optional input____.transparency ), ( "trimColor", Encode.string |> Encode.optional input____.trimColor ), ( "trimMd", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecFloatType) |> Encode.optional input____.trimMd ), ( "trimPad", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecIntType) |> Encode.optional input____.trimPad ), ( "trimSd", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecFloatType) |> Encode.optional input____.trimSd ), ( "trimTol", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecFloatType) |> Encode.optional input____.trimTol ), ( "trim", Encode.enum Datocms.Enum.ImgixParamsTrim.toString |> Encode.optional input____.trim ), ( "txtAlign", (Encode.enum Datocms.Enum.ImgixParamsTxtAlign.toString |> Encode.list) |> Encode.optional input____.txtAlign ), ( "txtClip", (Encode.enum Datocms.Enum.ImgixParamsTxtClip.toString |> Encode.list) |> Encode.optional input____.txtClip ), ( "txtColor", Encode.string |> Encode.optional input____.txtColor ), ( "txtFit", Encode.enum Datocms.Enum.ImgixParamsTxtFit.toString |> Encode.optional input____.txtFit ), ( "txtFont", Encode.string |> Encode.optional input____.txtFont ), ( "txtLead", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecIntType) |> Encode.optional input____.txtLead ), ( "txtLig", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecIntType) |> Encode.optional input____.txtLig ), ( "txtLineColor", Encode.string |> Encode.optional input____.txtLineColor ), ( "txtLine", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecIntType) |> Encode.optional input____.txtLine ), ( "txtPad", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecIntType) |> Encode.optional input____.txtPad ), ( "txtShad", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecFloatType) |> Encode.optional input____.txtShad ), ( "txtSize", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecIntType) |> Encode.optional input____.txtSize ), ( "txtTrack", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecIntType) |> Encode.optional input____.txtTrack ), ( "txtWidth", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecIntType) |> Encode.optional input____.txtWidth ), ( "txt", Encode.string |> Encode.optional input____.txt ), ( "usm", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecIntType) |> Encode.optional input____.usm ), ( "usmrad", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecFloatType) |> Encode.optional input____.usmrad ), ( "vib", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecIntType) |> Encode.optional input____.vib ), ( "w", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecFloatType) |> Encode.optional input____.w ) ]


buildInUseFilter :
    (InUseFilterOptionalFields -> InUseFilterOptionalFields)
    -> InUseFilter
buildInUseFilter fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { eq = Absent }
    in
    { eq = optionals____.eq }


type alias InUseFilterOptionalFields =
    { eq : OptionalArgument ScalarCodecs.BooleanType }


{-| Type for the InUseFilter input object.
-}
type alias InUseFilter =
    { eq : OptionalArgument ScalarCodecs.BooleanType }


{-| Encode a InUseFilter into a value that can be used as an argument.
-}
encodeInUseFilter : InUseFilter -> Value
encodeInUseFilter input____ =
    Encode.maybeObject
        [ ( "eq", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecBooleanType) |> Encode.optional input____.eq ) ]


buildItemIdFilter :
    (ItemIdFilterOptionalFields -> ItemIdFilterOptionalFields)
    -> ItemIdFilter
buildItemIdFilter fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { eq = Absent, neq = Absent, in_ = Absent, notIn = Absent }
    in
    { eq = optionals____.eq, neq = optionals____.neq, in_ = optionals____.in_, notIn = optionals____.notIn }


type alias ItemIdFilterOptionalFields =
    { eq : OptionalArgument ScalarCodecs.ItemId
    , neq : OptionalArgument ScalarCodecs.ItemId
    , in_ : OptionalArgument (List (Maybe ScalarCodecs.ItemId))
    , notIn : OptionalArgument (List (Maybe ScalarCodecs.ItemId))
    }


{-| Type for the ItemIdFilter input object.
-}
type alias ItemIdFilter =
    { eq : OptionalArgument ScalarCodecs.ItemId
    , neq : OptionalArgument ScalarCodecs.ItemId
    , in_ : OptionalArgument (List (Maybe ScalarCodecs.ItemId))
    , notIn : OptionalArgument (List (Maybe ScalarCodecs.ItemId))
    }


{-| Encode a ItemIdFilter into a value that can be used as an argument.
-}
encodeItemIdFilter : ItemIdFilter -> Value
encodeItemIdFilter input____ =
    Encode.maybeObject
        [ ( "eq", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecItemId) |> Encode.optional input____.eq ), ( "neq", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecItemId) |> Encode.optional input____.neq ), ( "in", ((ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecItemId) |> Encode.maybe |> Encode.list) |> Encode.optional input____.in_ ), ( "notIn", ((ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecItemId) |> Encode.maybe |> Encode.list) |> Encode.optional input____.notIn ) ]


buildOrientationFilter :
    (OrientationFilterOptionalFields -> OrientationFilterOptionalFields)
    -> OrientationFilter
buildOrientationFilter fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { eq = Absent, neq = Absent }
    in
    { eq = optionals____.eq, neq = optionals____.neq }


type alias OrientationFilterOptionalFields =
    { eq : OptionalArgument Datocms.Enum.UploadOrientation.UploadOrientation
    , neq : OptionalArgument Datocms.Enum.UploadOrientation.UploadOrientation
    }


{-| Type for the OrientationFilter input object.
-}
type alias OrientationFilter =
    { eq : OptionalArgument Datocms.Enum.UploadOrientation.UploadOrientation
    , neq : OptionalArgument Datocms.Enum.UploadOrientation.UploadOrientation
    }


{-| Encode a OrientationFilter into a value that can be used as an argument.
-}
encodeOrientationFilter : OrientationFilter -> Value
encodeOrientationFilter input____ =
    Encode.maybeObject
        [ ( "eq", Encode.enum Datocms.Enum.UploadOrientation.toString |> Encode.optional input____.eq ), ( "neq", Encode.enum Datocms.Enum.UploadOrientation.toString |> Encode.optional input____.neq ) ]


buildPublishedAtFilter :
    (PublishedAtFilterOptionalFields -> PublishedAtFilterOptionalFields)
    -> PublishedAtFilter
buildPublishedAtFilter fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { gt = Absent, lt = Absent, gte = Absent, lte = Absent, exists = Absent, eq = Absent, neq = Absent }
    in
    { gt = optionals____.gt, lt = optionals____.lt, gte = optionals____.gte, lte = optionals____.lte, exists = optionals____.exists, eq = optionals____.eq, neq = optionals____.neq }


type alias PublishedAtFilterOptionalFields =
    { gt : OptionalArgument ScalarCodecs.DateTime
    , lt : OptionalArgument ScalarCodecs.DateTime
    , gte : OptionalArgument ScalarCodecs.DateTime
    , lte : OptionalArgument ScalarCodecs.DateTime
    , exists : OptionalArgument ScalarCodecs.BooleanType
    , eq : OptionalArgument ScalarCodecs.DateTime
    , neq : OptionalArgument ScalarCodecs.DateTime
    }


{-| Type for the PublishedAtFilter input object.
-}
type alias PublishedAtFilter =
    { gt : OptionalArgument ScalarCodecs.DateTime
    , lt : OptionalArgument ScalarCodecs.DateTime
    , gte : OptionalArgument ScalarCodecs.DateTime
    , lte : OptionalArgument ScalarCodecs.DateTime
    , exists : OptionalArgument ScalarCodecs.BooleanType
    , eq : OptionalArgument ScalarCodecs.DateTime
    , neq : OptionalArgument ScalarCodecs.DateTime
    }


{-| Encode a PublishedAtFilter into a value that can be used as an argument.
-}
encodePublishedAtFilter : PublishedAtFilter -> Value
encodePublishedAtFilter input____ =
    Encode.maybeObject
        [ ( "gt", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input____.gt ), ( "lt", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input____.lt ), ( "gte", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input____.gte ), ( "lte", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input____.lte ), ( "exists", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecBooleanType) |> Encode.optional input____.exists ), ( "eq", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input____.eq ), ( "neq", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input____.neq ) ]


buildResolutionFilter :
    (ResolutionFilterOptionalFields -> ResolutionFilterOptionalFields)
    -> ResolutionFilter
buildResolutionFilter fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { eq = Absent, neq = Absent, in_ = Absent, notIn = Absent }
    in
    { eq = optionals____.eq, neq = optionals____.neq, in_ = optionals____.in_, notIn = optionals____.notIn }


type alias ResolutionFilterOptionalFields =
    { eq : OptionalArgument Datocms.Enum.ResolutionType.ResolutionType
    , neq : OptionalArgument Datocms.Enum.ResolutionType.ResolutionType
    , in_ : OptionalArgument (List (Maybe Datocms.Enum.ResolutionType.ResolutionType))
    , notIn : OptionalArgument (List (Maybe Datocms.Enum.ResolutionType.ResolutionType))
    }


{-| Type for the ResolutionFilter input object.
-}
type alias ResolutionFilter =
    { eq : OptionalArgument Datocms.Enum.ResolutionType.ResolutionType
    , neq : OptionalArgument Datocms.Enum.ResolutionType.ResolutionType
    , in_ : OptionalArgument (List (Maybe Datocms.Enum.ResolutionType.ResolutionType))
    , notIn : OptionalArgument (List (Maybe Datocms.Enum.ResolutionType.ResolutionType))
    }


{-| Encode a ResolutionFilter into a value that can be used as an argument.
-}
encodeResolutionFilter : ResolutionFilter -> Value
encodeResolutionFilter input____ =
    Encode.maybeObject
        [ ( "eq", Encode.enum Datocms.Enum.ResolutionType.toString |> Encode.optional input____.eq ), ( "neq", Encode.enum Datocms.Enum.ResolutionType.toString |> Encode.optional input____.neq ), ( "in", (Encode.enum Datocms.Enum.ResolutionType.toString |> Encode.maybe |> Encode.list) |> Encode.optional input____.in_ ), ( "notIn", (Encode.enum Datocms.Enum.ResolutionType.toString |> Encode.maybe |> Encode.list) |> Encode.optional input____.notIn ) ]


buildSlugFilter :
    (SlugFilterOptionalFields -> SlugFilterOptionalFields)
    -> SlugFilter
buildSlugFilter fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { eq = Absent, neq = Absent, in_ = Absent, notIn = Absent }
    in
    { eq = optionals____.eq, neq = optionals____.neq, in_ = optionals____.in_, notIn = optionals____.notIn }


type alias SlugFilterOptionalFields =
    { eq : OptionalArgument String
    , neq : OptionalArgument String
    , in_ : OptionalArgument (List (Maybe String))
    , notIn : OptionalArgument (List (Maybe String))
    }


{-| Type for the SlugFilter input object.
-}
type alias SlugFilter =
    { eq : OptionalArgument String
    , neq : OptionalArgument String
    , in_ : OptionalArgument (List (Maybe String))
    , notIn : OptionalArgument (List (Maybe String))
    }


{-| Encode a SlugFilter into a value that can be used as an argument.
-}
encodeSlugFilter : SlugFilter -> Value
encodeSlugFilter input____ =
    Encode.maybeObject
        [ ( "eq", Encode.string |> Encode.optional input____.eq ), ( "neq", Encode.string |> Encode.optional input____.neq ), ( "in", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input____.in_ ), ( "notIn", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input____.notIn ) ]


buildStatusFilter :
    (StatusFilterOptionalFields -> StatusFilterOptionalFields)
    -> StatusFilter
buildStatusFilter fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { eq = Absent, neq = Absent, in_ = Absent, notIn = Absent }
    in
    { eq = optionals____.eq, neq = optionals____.neq, in_ = optionals____.in_, notIn = optionals____.notIn }


type alias StatusFilterOptionalFields =
    { eq : OptionalArgument Datocms.Enum.ItemStatus.ItemStatus
    , neq : OptionalArgument Datocms.Enum.ItemStatus.ItemStatus
    , in_ : OptionalArgument (List (Maybe Datocms.Enum.ItemStatus.ItemStatus))
    , notIn : OptionalArgument (List (Maybe Datocms.Enum.ItemStatus.ItemStatus))
    }


{-| Type for the StatusFilter input object.
-}
type alias StatusFilter =
    { eq : OptionalArgument Datocms.Enum.ItemStatus.ItemStatus
    , neq : OptionalArgument Datocms.Enum.ItemStatus.ItemStatus
    , in_ : OptionalArgument (List (Maybe Datocms.Enum.ItemStatus.ItemStatus))
    , notIn : OptionalArgument (List (Maybe Datocms.Enum.ItemStatus.ItemStatus))
    }


{-| Encode a StatusFilter into a value that can be used as an argument.
-}
encodeStatusFilter : StatusFilter -> Value
encodeStatusFilter input____ =
    Encode.maybeObject
        [ ( "eq", Encode.enum Datocms.Enum.ItemStatus.toString |> Encode.optional input____.eq ), ( "neq", Encode.enum Datocms.Enum.ItemStatus.toString |> Encode.optional input____.neq ), ( "in", (Encode.enum Datocms.Enum.ItemStatus.toString |> Encode.maybe |> Encode.list) |> Encode.optional input____.in_ ), ( "notIn", (Encode.enum Datocms.Enum.ItemStatus.toString |> Encode.maybe |> Encode.list) |> Encode.optional input____.notIn ) ]


buildStringFilter :
    (StringFilterOptionalFields -> StringFilterOptionalFields)
    -> StringFilter
buildStringFilter fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { matches = Absent, notMatches = Absent, isBlank = Absent, eq = Absent, neq = Absent, in_ = Absent, notIn = Absent, exists = Absent }
    in
    { matches = optionals____.matches, notMatches = optionals____.notMatches, isBlank = optionals____.isBlank, eq = optionals____.eq, neq = optionals____.neq, in_ = optionals____.in_, notIn = optionals____.notIn, exists = optionals____.exists }


type alias StringFilterOptionalFields =
    { matches : OptionalArgument StringMatchesFilter
    , notMatches : OptionalArgument StringMatchesFilter
    , isBlank : OptionalArgument ScalarCodecs.BooleanType
    , eq : OptionalArgument String
    , neq : OptionalArgument String
    , in_ : OptionalArgument (List (Maybe String))
    , notIn : OptionalArgument (List (Maybe String))
    , exists : OptionalArgument ScalarCodecs.BooleanType
    }


{-| Type for the StringFilter input object.
-}
type alias StringFilter =
    { matches : OptionalArgument StringMatchesFilter
    , notMatches : OptionalArgument StringMatchesFilter
    , isBlank : OptionalArgument ScalarCodecs.BooleanType
    , eq : OptionalArgument String
    , neq : OptionalArgument String
    , in_ : OptionalArgument (List (Maybe String))
    , notIn : OptionalArgument (List (Maybe String))
    , exists : OptionalArgument ScalarCodecs.BooleanType
    }


{-| Encode a StringFilter into a value that can be used as an argument.
-}
encodeStringFilter : StringFilter -> Value
encodeStringFilter input____ =
    Encode.maybeObject
        [ ( "matches", encodeStringMatchesFilter |> Encode.optional input____.matches ), ( "notMatches", encodeStringMatchesFilter |> Encode.optional input____.notMatches ), ( "isBlank", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecBooleanType) |> Encode.optional input____.isBlank ), ( "eq", Encode.string |> Encode.optional input____.eq ), ( "neq", Encode.string |> Encode.optional input____.neq ), ( "in", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input____.in_ ), ( "notIn", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input____.notIn ), ( "exists", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecBooleanType) |> Encode.optional input____.exists ) ]


buildStringMatchesFilter :
    StringMatchesFilterRequiredFields
    -> (StringMatchesFilterOptionalFields -> StringMatchesFilterOptionalFields)
    -> StringMatchesFilter
buildStringMatchesFilter required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { caseSensitive = Absent, regexp = Absent }
    in
    { pattern = required____.pattern, caseSensitive = optionals____.caseSensitive, regexp = optionals____.regexp }


type alias StringMatchesFilterRequiredFields =
    { pattern : String }


type alias StringMatchesFilterOptionalFields =
    { caseSensitive : OptionalArgument ScalarCodecs.BooleanType
    , regexp : OptionalArgument ScalarCodecs.BooleanType
    }


{-| Type for the StringMatchesFilter input object.
-}
type alias StringMatchesFilter =
    { pattern : String
    , caseSensitive : OptionalArgument ScalarCodecs.BooleanType
    , regexp : OptionalArgument ScalarCodecs.BooleanType
    }


{-| Encode a StringMatchesFilter into a value that can be used as an argument.
-}
encodeStringMatchesFilter : StringMatchesFilter -> Value
encodeStringMatchesFilter input____ =
    Encode.maybeObject
        [ ( "pattern", Encode.string input____.pattern |> Just ), ( "caseSensitive", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecBooleanType) |> Encode.optional input____.caseSensitive ), ( "regexp", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecBooleanType) |> Encode.optional input____.regexp ) ]


buildStructuredTextFilter :
    (StructuredTextFilterOptionalFields -> StructuredTextFilterOptionalFields)
    -> StructuredTextFilter
buildStructuredTextFilter fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { matches = Absent, notMatches = Absent, isBlank = Absent, exists = Absent }
    in
    { matches = optionals____.matches, notMatches = optionals____.notMatches, isBlank = optionals____.isBlank, exists = optionals____.exists }


type alias StructuredTextFilterOptionalFields =
    { matches : OptionalArgument StringMatchesFilter
    , notMatches : OptionalArgument StringMatchesFilter
    , isBlank : OptionalArgument ScalarCodecs.BooleanType
    , exists : OptionalArgument ScalarCodecs.BooleanType
    }


{-| Type for the StructuredTextFilter input object.
-}
type alias StructuredTextFilter =
    { matches : OptionalArgument StringMatchesFilter
    , notMatches : OptionalArgument StringMatchesFilter
    , isBlank : OptionalArgument ScalarCodecs.BooleanType
    , exists : OptionalArgument ScalarCodecs.BooleanType
    }


{-| Encode a StructuredTextFilter into a value that can be used as an argument.
-}
encodeStructuredTextFilter : StructuredTextFilter -> Value
encodeStructuredTextFilter input____ =
    Encode.maybeObject
        [ ( "matches", encodeStringMatchesFilter |> Encode.optional input____.matches ), ( "notMatches", encodeStringMatchesFilter |> Encode.optional input____.notMatches ), ( "isBlank", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecBooleanType) |> Encode.optional input____.isBlank ), ( "exists", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecBooleanType) |> Encode.optional input____.exists ) ]


buildTextFilter :
    (TextFilterOptionalFields -> TextFilterOptionalFields)
    -> TextFilter
buildTextFilter fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { matches = Absent, notMatches = Absent, isBlank = Absent, exists = Absent }
    in
    { matches = optionals____.matches, notMatches = optionals____.notMatches, isBlank = optionals____.isBlank, exists = optionals____.exists }


type alias TextFilterOptionalFields =
    { matches : OptionalArgument StringMatchesFilter
    , notMatches : OptionalArgument StringMatchesFilter
    , isBlank : OptionalArgument ScalarCodecs.BooleanType
    , exists : OptionalArgument ScalarCodecs.BooleanType
    }


{-| Type for the TextFilter input object.
-}
type alias TextFilter =
    { matches : OptionalArgument StringMatchesFilter
    , notMatches : OptionalArgument StringMatchesFilter
    , isBlank : OptionalArgument ScalarCodecs.BooleanType
    , exists : OptionalArgument ScalarCodecs.BooleanType
    }


{-| Encode a TextFilter into a value that can be used as an argument.
-}
encodeTextFilter : TextFilter -> Value
encodeTextFilter input____ =
    Encode.maybeObject
        [ ( "matches", encodeStringMatchesFilter |> Encode.optional input____.matches ), ( "notMatches", encodeStringMatchesFilter |> Encode.optional input____.notMatches ), ( "isBlank", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecBooleanType) |> Encode.optional input____.isBlank ), ( "exists", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecBooleanType) |> Encode.optional input____.exists ) ]


buildTypeFilter :
    (TypeFilterOptionalFields -> TypeFilterOptionalFields)
    -> TypeFilter
buildTypeFilter fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { eq = Absent, neq = Absent, in_ = Absent, notIn = Absent }
    in
    { eq = optionals____.eq, neq = optionals____.neq, in_ = optionals____.in_, notIn = optionals____.notIn }


type alias TypeFilterOptionalFields =
    { eq : OptionalArgument Datocms.Enum.UploadType.UploadType
    , neq : OptionalArgument Datocms.Enum.UploadType.UploadType
    , in_ : OptionalArgument (List (Maybe Datocms.Enum.UploadType.UploadType))
    , notIn : OptionalArgument (List (Maybe Datocms.Enum.UploadType.UploadType))
    }


{-| Type for the TypeFilter input object.
-}
type alias TypeFilter =
    { eq : OptionalArgument Datocms.Enum.UploadType.UploadType
    , neq : OptionalArgument Datocms.Enum.UploadType.UploadType
    , in_ : OptionalArgument (List (Maybe Datocms.Enum.UploadType.UploadType))
    , notIn : OptionalArgument (List (Maybe Datocms.Enum.UploadType.UploadType))
    }


{-| Encode a TypeFilter into a value that can be used as an argument.
-}
encodeTypeFilter : TypeFilter -> Value
encodeTypeFilter input____ =
    Encode.maybeObject
        [ ( "eq", Encode.enum Datocms.Enum.UploadType.toString |> Encode.optional input____.eq ), ( "neq", Encode.enum Datocms.Enum.UploadType.toString |> Encode.optional input____.neq ), ( "in", (Encode.enum Datocms.Enum.UploadType.toString |> Encode.maybe |> Encode.list) |> Encode.optional input____.in_ ), ( "notIn", (Encode.enum Datocms.Enum.UploadType.toString |> Encode.maybe |> Encode.list) |> Encode.optional input____.notIn ) ]


buildUpdatedAtFilter :
    (UpdatedAtFilterOptionalFields -> UpdatedAtFilterOptionalFields)
    -> UpdatedAtFilter
buildUpdatedAtFilter fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { gt = Absent, lt = Absent, gte = Absent, lte = Absent, exists = Absent, eq = Absent, neq = Absent }
    in
    { gt = optionals____.gt, lt = optionals____.lt, gte = optionals____.gte, lte = optionals____.lte, exists = optionals____.exists, eq = optionals____.eq, neq = optionals____.neq }


type alias UpdatedAtFilterOptionalFields =
    { gt : OptionalArgument ScalarCodecs.DateTime
    , lt : OptionalArgument ScalarCodecs.DateTime
    , gte : OptionalArgument ScalarCodecs.DateTime
    , lte : OptionalArgument ScalarCodecs.DateTime
    , exists : OptionalArgument ScalarCodecs.BooleanType
    , eq : OptionalArgument ScalarCodecs.DateTime
    , neq : OptionalArgument ScalarCodecs.DateTime
    }


{-| Type for the UpdatedAtFilter input object.
-}
type alias UpdatedAtFilter =
    { gt : OptionalArgument ScalarCodecs.DateTime
    , lt : OptionalArgument ScalarCodecs.DateTime
    , gte : OptionalArgument ScalarCodecs.DateTime
    , lte : OptionalArgument ScalarCodecs.DateTime
    , exists : OptionalArgument ScalarCodecs.BooleanType
    , eq : OptionalArgument ScalarCodecs.DateTime
    , neq : OptionalArgument ScalarCodecs.DateTime
    }


{-| Encode a UpdatedAtFilter into a value that can be used as an argument.
-}
encodeUpdatedAtFilter : UpdatedAtFilter -> Value
encodeUpdatedAtFilter input____ =
    Encode.maybeObject
        [ ( "gt", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input____.gt ), ( "lt", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input____.lt ), ( "gte", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input____.gte ), ( "lte", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input____.lte ), ( "exists", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecBooleanType) |> Encode.optional input____.exists ), ( "eq", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input____.eq ), ( "neq", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input____.neq ) ]


buildUploadAltFilter :
    (UploadAltFilterOptionalFields -> UploadAltFilterOptionalFields)
    -> UploadAltFilter
buildUploadAltFilter fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { matches = Absent, notMatches = Absent, eq = Absent, neq = Absent, in_ = Absent, notIn = Absent, exists = Absent }
    in
    { matches = optionals____.matches, notMatches = optionals____.notMatches, eq = optionals____.eq, neq = optionals____.neq, in_ = optionals____.in_, notIn = optionals____.notIn, exists = optionals____.exists }


type alias UploadAltFilterOptionalFields =
    { matches : OptionalArgument StringMatchesFilter
    , notMatches : OptionalArgument StringMatchesFilter
    , eq : OptionalArgument String
    , neq : OptionalArgument String
    , in_ : OptionalArgument (List (Maybe String))
    , notIn : OptionalArgument (List (Maybe String))
    , exists : OptionalArgument ScalarCodecs.BooleanType
    }


{-| Type for the UploadAltFilter input object.
-}
type alias UploadAltFilter =
    { matches : OptionalArgument StringMatchesFilter
    , notMatches : OptionalArgument StringMatchesFilter
    , eq : OptionalArgument String
    , neq : OptionalArgument String
    , in_ : OptionalArgument (List (Maybe String))
    , notIn : OptionalArgument (List (Maybe String))
    , exists : OptionalArgument ScalarCodecs.BooleanType
    }


{-| Encode a UploadAltFilter into a value that can be used as an argument.
-}
encodeUploadAltFilter : UploadAltFilter -> Value
encodeUploadAltFilter input____ =
    Encode.maybeObject
        [ ( "matches", encodeStringMatchesFilter |> Encode.optional input____.matches ), ( "notMatches", encodeStringMatchesFilter |> Encode.optional input____.notMatches ), ( "eq", Encode.string |> Encode.optional input____.eq ), ( "neq", Encode.string |> Encode.optional input____.neq ), ( "in", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input____.in_ ), ( "notIn", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input____.notIn ), ( "exists", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecBooleanType) |> Encode.optional input____.exists ) ]


buildUploadAuthorFilter :
    (UploadAuthorFilterOptionalFields -> UploadAuthorFilterOptionalFields)
    -> UploadAuthorFilter
buildUploadAuthorFilter fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { matches = Absent, notMatches = Absent, exists = Absent }
    in
    { matches = optionals____.matches, notMatches = optionals____.notMatches, exists = optionals____.exists }


type alias UploadAuthorFilterOptionalFields =
    { matches : OptionalArgument StringMatchesFilter
    , notMatches : OptionalArgument StringMatchesFilter
    , exists : OptionalArgument ScalarCodecs.BooleanType
    }


{-| Type for the UploadAuthorFilter input object.
-}
type alias UploadAuthorFilter =
    { matches : OptionalArgument StringMatchesFilter
    , notMatches : OptionalArgument StringMatchesFilter
    , exists : OptionalArgument ScalarCodecs.BooleanType
    }


{-| Encode a UploadAuthorFilter into a value that can be used as an argument.
-}
encodeUploadAuthorFilter : UploadAuthorFilter -> Value
encodeUploadAuthorFilter input____ =
    Encode.maybeObject
        [ ( "matches", encodeStringMatchesFilter |> Encode.optional input____.matches ), ( "notMatches", encodeStringMatchesFilter |> Encode.optional input____.notMatches ), ( "exists", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecBooleanType) |> Encode.optional input____.exists ) ]


buildUploadBasenameFilter :
    (UploadBasenameFilterOptionalFields -> UploadBasenameFilterOptionalFields)
    -> UploadBasenameFilter
buildUploadBasenameFilter fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { matches = Absent, notMatches = Absent }
    in
    { matches = optionals____.matches, notMatches = optionals____.notMatches }


type alias UploadBasenameFilterOptionalFields =
    { matches : OptionalArgument StringMatchesFilter
    , notMatches : OptionalArgument StringMatchesFilter
    }


{-| Type for the UploadBasenameFilter input object.
-}
type alias UploadBasenameFilter =
    { matches : OptionalArgument StringMatchesFilter
    , notMatches : OptionalArgument StringMatchesFilter
    }


{-| Encode a UploadBasenameFilter into a value that can be used as an argument.
-}
encodeUploadBasenameFilter : UploadBasenameFilter -> Value
encodeUploadBasenameFilter input____ =
    Encode.maybeObject
        [ ( "matches", encodeStringMatchesFilter |> Encode.optional input____.matches ), ( "notMatches", encodeStringMatchesFilter |> Encode.optional input____.notMatches ) ]


buildUploadColorsFilter :
    (UploadColorsFilterOptionalFields -> UploadColorsFilterOptionalFields)
    -> UploadColorsFilter
buildUploadColorsFilter fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { contains = Absent, allIn = Absent, anyIn = Absent, notIn = Absent, eq = Absent }
    in
    { contains = optionals____.contains, allIn = optionals____.allIn, anyIn = optionals____.anyIn, notIn = optionals____.notIn, eq = optionals____.eq }


type alias UploadColorsFilterOptionalFields =
    { contains : OptionalArgument Datocms.Enum.ColorBucketType.ColorBucketType
    , allIn : OptionalArgument (List (Maybe Datocms.Enum.ColorBucketType.ColorBucketType))
    , anyIn : OptionalArgument (List (Maybe Datocms.Enum.ColorBucketType.ColorBucketType))
    , notIn : OptionalArgument (List (Maybe Datocms.Enum.ColorBucketType.ColorBucketType))
    , eq : OptionalArgument (List (Maybe Datocms.Enum.ColorBucketType.ColorBucketType))
    }


{-| Type for the UploadColorsFilter input object.
-}
type alias UploadColorsFilter =
    { contains : OptionalArgument Datocms.Enum.ColorBucketType.ColorBucketType
    , allIn : OptionalArgument (List (Maybe Datocms.Enum.ColorBucketType.ColorBucketType))
    , anyIn : OptionalArgument (List (Maybe Datocms.Enum.ColorBucketType.ColorBucketType))
    , notIn : OptionalArgument (List (Maybe Datocms.Enum.ColorBucketType.ColorBucketType))
    , eq : OptionalArgument (List (Maybe Datocms.Enum.ColorBucketType.ColorBucketType))
    }


{-| Encode a UploadColorsFilter into a value that can be used as an argument.
-}
encodeUploadColorsFilter : UploadColorsFilter -> Value
encodeUploadColorsFilter input____ =
    Encode.maybeObject
        [ ( "contains", Encode.enum Datocms.Enum.ColorBucketType.toString |> Encode.optional input____.contains ), ( "allIn", (Encode.enum Datocms.Enum.ColorBucketType.toString |> Encode.maybe |> Encode.list) |> Encode.optional input____.allIn ), ( "anyIn", (Encode.enum Datocms.Enum.ColorBucketType.toString |> Encode.maybe |> Encode.list) |> Encode.optional input____.anyIn ), ( "notIn", (Encode.enum Datocms.Enum.ColorBucketType.toString |> Encode.maybe |> Encode.list) |> Encode.optional input____.notIn ), ( "eq", (Encode.enum Datocms.Enum.ColorBucketType.toString |> Encode.maybe |> Encode.list) |> Encode.optional input____.eq ) ]


buildUploadCopyrightFilter :
    (UploadCopyrightFilterOptionalFields -> UploadCopyrightFilterOptionalFields)
    -> UploadCopyrightFilter
buildUploadCopyrightFilter fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { matches = Absent, notMatches = Absent, exists = Absent }
    in
    { matches = optionals____.matches, notMatches = optionals____.notMatches, exists = optionals____.exists }


type alias UploadCopyrightFilterOptionalFields =
    { matches : OptionalArgument StringMatchesFilter
    , notMatches : OptionalArgument StringMatchesFilter
    , exists : OptionalArgument ScalarCodecs.BooleanType
    }


{-| Type for the UploadCopyrightFilter input object.
-}
type alias UploadCopyrightFilter =
    { matches : OptionalArgument StringMatchesFilter
    , notMatches : OptionalArgument StringMatchesFilter
    , exists : OptionalArgument ScalarCodecs.BooleanType
    }


{-| Encode a UploadCopyrightFilter into a value that can be used as an argument.
-}
encodeUploadCopyrightFilter : UploadCopyrightFilter -> Value
encodeUploadCopyrightFilter input____ =
    Encode.maybeObject
        [ ( "matches", encodeStringMatchesFilter |> Encode.optional input____.matches ), ( "notMatches", encodeStringMatchesFilter |> Encode.optional input____.notMatches ), ( "exists", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecBooleanType) |> Encode.optional input____.exists ) ]


buildUploadCreatedAtFilter :
    (UploadCreatedAtFilterOptionalFields -> UploadCreatedAtFilterOptionalFields)
    -> UploadCreatedAtFilter
buildUploadCreatedAtFilter fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { eq = Absent, neq = Absent, lt = Absent, lte = Absent, gt = Absent, gte = Absent }
    in
    { eq = optionals____.eq, neq = optionals____.neq, lt = optionals____.lt, lte = optionals____.lte, gt = optionals____.gt, gte = optionals____.gte }


type alias UploadCreatedAtFilterOptionalFields =
    { eq : OptionalArgument ScalarCodecs.DateTime
    , neq : OptionalArgument ScalarCodecs.DateTime
    , lt : OptionalArgument ScalarCodecs.DateTime
    , lte : OptionalArgument ScalarCodecs.DateTime
    , gt : OptionalArgument ScalarCodecs.DateTime
    , gte : OptionalArgument ScalarCodecs.DateTime
    }


{-| Type for the UploadCreatedAtFilter input object.
-}
type alias UploadCreatedAtFilter =
    { eq : OptionalArgument ScalarCodecs.DateTime
    , neq : OptionalArgument ScalarCodecs.DateTime
    , lt : OptionalArgument ScalarCodecs.DateTime
    , lte : OptionalArgument ScalarCodecs.DateTime
    , gt : OptionalArgument ScalarCodecs.DateTime
    , gte : OptionalArgument ScalarCodecs.DateTime
    }


{-| Encode a UploadCreatedAtFilter into a value that can be used as an argument.
-}
encodeUploadCreatedAtFilter : UploadCreatedAtFilter -> Value
encodeUploadCreatedAtFilter input____ =
    Encode.maybeObject
        [ ( "eq", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input____.eq ), ( "neq", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input____.neq ), ( "lt", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input____.lt ), ( "lte", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input____.lte ), ( "gt", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input____.gt ), ( "gte", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input____.gte ) ]


buildUploadFilenameFilter :
    (UploadFilenameFilterOptionalFields -> UploadFilenameFilterOptionalFields)
    -> UploadFilenameFilter
buildUploadFilenameFilter fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { matches = Absent, notMatches = Absent }
    in
    { matches = optionals____.matches, notMatches = optionals____.notMatches }


type alias UploadFilenameFilterOptionalFields =
    { matches : OptionalArgument StringMatchesFilter
    , notMatches : OptionalArgument StringMatchesFilter
    }


{-| Type for the UploadFilenameFilter input object.
-}
type alias UploadFilenameFilter =
    { matches : OptionalArgument StringMatchesFilter
    , notMatches : OptionalArgument StringMatchesFilter
    }


{-| Encode a UploadFilenameFilter into a value that can be used as an argument.
-}
encodeUploadFilenameFilter : UploadFilenameFilter -> Value
encodeUploadFilenameFilter input____ =
    Encode.maybeObject
        [ ( "matches", encodeStringMatchesFilter |> Encode.optional input____.matches ), ( "notMatches", encodeStringMatchesFilter |> Encode.optional input____.notMatches ) ]


buildUploadFilter :
    (UploadFilterOptionalFields -> UploadFilterOptionalFields)
    -> UploadFilter
buildUploadFilter fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { type_ = Absent, inUse = Absent, resolution = Absent, size = Absent, tags = Absent, smartTags = Absent, colors = Absent, orientation = Absent, id = Absent, mimeType = Absent, format = Absent, height = Absent, width = Absent, alt = Absent, title = Absent, notes = Absent, md5 = Absent, author = Absent, copyright = Absent, basename = Absent, filename = Absent, createdAt_ = Absent, updatedAt_ = Absent, or = Absent }
    in
    UploadFilter { type_ = optionals____.type_, inUse = optionals____.inUse, resolution = optionals____.resolution, size = optionals____.size, tags = optionals____.tags, smartTags = optionals____.smartTags, colors = optionals____.colors, orientation = optionals____.orientation, id = optionals____.id, mimeType = optionals____.mimeType, format = optionals____.format, height = optionals____.height, width = optionals____.width, alt = optionals____.alt, title = optionals____.title, notes = optionals____.notes, md5 = optionals____.md5, author = optionals____.author, copyright = optionals____.copyright, basename = optionals____.basename, filename = optionals____.filename, createdAt_ = optionals____.createdAt_, updatedAt_ = optionals____.updatedAt_, or = optionals____.or }


type alias UploadFilterOptionalFields =
    { type_ : OptionalArgument TypeFilter
    , inUse : OptionalArgument InUseFilter
    , resolution : OptionalArgument ResolutionFilter
    , size : OptionalArgument UploadSizeFilter
    , tags : OptionalArgument UploadTagsFilter
    , smartTags : OptionalArgument UploadTagsFilter
    , colors : OptionalArgument UploadColorsFilter
    , orientation : OptionalArgument OrientationFilter
    , id : OptionalArgument UploadIdFilter
    , mimeType : OptionalArgument UploadMimeTypeFilter
    , format : OptionalArgument UploadFormatFilter
    , height : OptionalArgument UploadHeightFilter
    , width : OptionalArgument UploadWidthFilter
    , alt : OptionalArgument UploadAltFilter
    , title : OptionalArgument UploadTitleFilter
    , notes : OptionalArgument UploadNotesFilter
    , md5 : OptionalArgument UploadMd5Filter
    , author : OptionalArgument UploadAuthorFilter
    , copyright : OptionalArgument UploadCopyrightFilter
    , basename : OptionalArgument UploadBasenameFilter
    , filename : OptionalArgument UploadFilenameFilter
    , createdAt_ : OptionalArgument UploadCreatedAtFilter
    , updatedAt_ : OptionalArgument UploadUpdatedAtFilter
    , or : OptionalArgument (List (Maybe UploadFilter))
    }


{-| Type alias for the `UploadFilter` attributes. Note that this type
needs to use the `UploadFilter` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias UploadFilterRaw =
    { type_ : OptionalArgument TypeFilter
    , inUse : OptionalArgument InUseFilter
    , resolution : OptionalArgument ResolutionFilter
    , size : OptionalArgument UploadSizeFilter
    , tags : OptionalArgument UploadTagsFilter
    , smartTags : OptionalArgument UploadTagsFilter
    , colors : OptionalArgument UploadColorsFilter
    , orientation : OptionalArgument OrientationFilter
    , id : OptionalArgument UploadIdFilter
    , mimeType : OptionalArgument UploadMimeTypeFilter
    , format : OptionalArgument UploadFormatFilter
    , height : OptionalArgument UploadHeightFilter
    , width : OptionalArgument UploadWidthFilter
    , alt : OptionalArgument UploadAltFilter
    , title : OptionalArgument UploadTitleFilter
    , notes : OptionalArgument UploadNotesFilter
    , md5 : OptionalArgument UploadMd5Filter
    , author : OptionalArgument UploadAuthorFilter
    , copyright : OptionalArgument UploadCopyrightFilter
    , basename : OptionalArgument UploadBasenameFilter
    , filename : OptionalArgument UploadFilenameFilter
    , createdAt_ : OptionalArgument UploadCreatedAtFilter
    , updatedAt_ : OptionalArgument UploadUpdatedAtFilter
    , or : OptionalArgument (List (Maybe UploadFilter))
    }


{-| Type for the UploadFilter input object.
-}
type UploadFilter
    = UploadFilter UploadFilterRaw


{-| Encode a UploadFilter into a value that can be used as an argument.
-}
encodeUploadFilter : UploadFilter -> Value
encodeUploadFilter (UploadFilter input____) =
    Encode.maybeObject
        [ ( "type", encodeTypeFilter |> Encode.optional input____.type_ ), ( "inUse", encodeInUseFilter |> Encode.optional input____.inUse ), ( "resolution", encodeResolutionFilter |> Encode.optional input____.resolution ), ( "size", encodeUploadSizeFilter |> Encode.optional input____.size ), ( "tags", encodeUploadTagsFilter |> Encode.optional input____.tags ), ( "smartTags", encodeUploadTagsFilter |> Encode.optional input____.smartTags ), ( "colors", encodeUploadColorsFilter |> Encode.optional input____.colors ), ( "orientation", encodeOrientationFilter |> Encode.optional input____.orientation ), ( "id", encodeUploadIdFilter |> Encode.optional input____.id ), ( "mimeType", encodeUploadMimeTypeFilter |> Encode.optional input____.mimeType ), ( "format", encodeUploadFormatFilter |> Encode.optional input____.format ), ( "height", encodeUploadHeightFilter |> Encode.optional input____.height ), ( "width", encodeUploadWidthFilter |> Encode.optional input____.width ), ( "alt", encodeUploadAltFilter |> Encode.optional input____.alt ), ( "title", encodeUploadTitleFilter |> Encode.optional input____.title ), ( "notes", encodeUploadNotesFilter |> Encode.optional input____.notes ), ( "md5", encodeUploadMd5Filter |> Encode.optional input____.md5 ), ( "author", encodeUploadAuthorFilter |> Encode.optional input____.author ), ( "copyright", encodeUploadCopyrightFilter |> Encode.optional input____.copyright ), ( "basename", encodeUploadBasenameFilter |> Encode.optional input____.basename ), ( "filename", encodeUploadFilenameFilter |> Encode.optional input____.filename ), ( "_createdAt", encodeUploadCreatedAtFilter |> Encode.optional input____.createdAt_ ), ( "_updatedAt", encodeUploadUpdatedAtFilter |> Encode.optional input____.updatedAt_ ), ( "OR", (encodeUploadFilter |> Encode.maybe |> Encode.list) |> Encode.optional input____.or ) ]


buildUploadFormatFilter :
    (UploadFormatFilterOptionalFields -> UploadFormatFilterOptionalFields)
    -> UploadFormatFilter
buildUploadFormatFilter fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { eq = Absent, neq = Absent, in_ = Absent, notIn = Absent }
    in
    { eq = optionals____.eq, neq = optionals____.neq, in_ = optionals____.in_, notIn = optionals____.notIn }


type alias UploadFormatFilterOptionalFields =
    { eq : OptionalArgument String
    , neq : OptionalArgument String
    , in_ : OptionalArgument (List (Maybe String))
    , notIn : OptionalArgument (List (Maybe String))
    }


{-| Type for the UploadFormatFilter input object.
-}
type alias UploadFormatFilter =
    { eq : OptionalArgument String
    , neq : OptionalArgument String
    , in_ : OptionalArgument (List (Maybe String))
    , notIn : OptionalArgument (List (Maybe String))
    }


{-| Encode a UploadFormatFilter into a value that can be used as an argument.
-}
encodeUploadFormatFilter : UploadFormatFilter -> Value
encodeUploadFormatFilter input____ =
    Encode.maybeObject
        [ ( "eq", Encode.string |> Encode.optional input____.eq ), ( "neq", Encode.string |> Encode.optional input____.neq ), ( "in", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input____.in_ ), ( "notIn", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input____.notIn ) ]


buildUploadHeightFilter :
    (UploadHeightFilterOptionalFields -> UploadHeightFilterOptionalFields)
    -> UploadHeightFilter
buildUploadHeightFilter fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { gt = Absent, lt = Absent, gte = Absent, lte = Absent, eq = Absent, neq = Absent }
    in
    { gt = optionals____.gt, lt = optionals____.lt, gte = optionals____.gte, lte = optionals____.lte, eq = optionals____.eq, neq = optionals____.neq }


type alias UploadHeightFilterOptionalFields =
    { gt : OptionalArgument ScalarCodecs.IntType
    , lt : OptionalArgument ScalarCodecs.IntType
    , gte : OptionalArgument ScalarCodecs.IntType
    , lte : OptionalArgument ScalarCodecs.IntType
    , eq : OptionalArgument ScalarCodecs.IntType
    , neq : OptionalArgument ScalarCodecs.IntType
    }


{-| Type for the UploadHeightFilter input object.
-}
type alias UploadHeightFilter =
    { gt : OptionalArgument ScalarCodecs.IntType
    , lt : OptionalArgument ScalarCodecs.IntType
    , gte : OptionalArgument ScalarCodecs.IntType
    , lte : OptionalArgument ScalarCodecs.IntType
    , eq : OptionalArgument ScalarCodecs.IntType
    , neq : OptionalArgument ScalarCodecs.IntType
    }


{-| Encode a UploadHeightFilter into a value that can be used as an argument.
-}
encodeUploadHeightFilter : UploadHeightFilter -> Value
encodeUploadHeightFilter input____ =
    Encode.maybeObject
        [ ( "gt", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecIntType) |> Encode.optional input____.gt ), ( "lt", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecIntType) |> Encode.optional input____.lt ), ( "gte", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecIntType) |> Encode.optional input____.gte ), ( "lte", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecIntType) |> Encode.optional input____.lte ), ( "eq", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecIntType) |> Encode.optional input____.eq ), ( "neq", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecIntType) |> Encode.optional input____.neq ) ]


buildUploadIdFilter :
    (UploadIdFilterOptionalFields -> UploadIdFilterOptionalFields)
    -> UploadIdFilter
buildUploadIdFilter fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { eq = Absent, neq = Absent, in_ = Absent, notIn = Absent }
    in
    { eq = optionals____.eq, neq = optionals____.neq, in_ = optionals____.in_, notIn = optionals____.notIn }


type alias UploadIdFilterOptionalFields =
    { eq : OptionalArgument ScalarCodecs.UploadId
    , neq : OptionalArgument ScalarCodecs.UploadId
    , in_ : OptionalArgument (List (Maybe ScalarCodecs.UploadId))
    , notIn : OptionalArgument (List (Maybe ScalarCodecs.UploadId))
    }


{-| Type for the UploadIdFilter input object.
-}
type alias UploadIdFilter =
    { eq : OptionalArgument ScalarCodecs.UploadId
    , neq : OptionalArgument ScalarCodecs.UploadId
    , in_ : OptionalArgument (List (Maybe ScalarCodecs.UploadId))
    , notIn : OptionalArgument (List (Maybe ScalarCodecs.UploadId))
    }


{-| Encode a UploadIdFilter into a value that can be used as an argument.
-}
encodeUploadIdFilter : UploadIdFilter -> Value
encodeUploadIdFilter input____ =
    Encode.maybeObject
        [ ( "eq", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecUploadId) |> Encode.optional input____.eq ), ( "neq", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecUploadId) |> Encode.optional input____.neq ), ( "in", ((ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecUploadId) |> Encode.maybe |> Encode.list) |> Encode.optional input____.in_ ), ( "notIn", ((ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecUploadId) |> Encode.maybe |> Encode.list) |> Encode.optional input____.notIn ) ]


buildUploadMd5Filter :
    (UploadMd5FilterOptionalFields -> UploadMd5FilterOptionalFields)
    -> UploadMd5Filter
buildUploadMd5Filter fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { eq = Absent, neq = Absent, in_ = Absent, notIn = Absent }
    in
    { eq = optionals____.eq, neq = optionals____.neq, in_ = optionals____.in_, notIn = optionals____.notIn }


type alias UploadMd5FilterOptionalFields =
    { eq : OptionalArgument String
    , neq : OptionalArgument String
    , in_ : OptionalArgument (List (Maybe String))
    , notIn : OptionalArgument (List (Maybe String))
    }


{-| Type for the UploadMd5Filter input object.
-}
type alias UploadMd5Filter =
    { eq : OptionalArgument String
    , neq : OptionalArgument String
    , in_ : OptionalArgument (List (Maybe String))
    , notIn : OptionalArgument (List (Maybe String))
    }


{-| Encode a UploadMd5Filter into a value that can be used as an argument.
-}
encodeUploadMd5Filter : UploadMd5Filter -> Value
encodeUploadMd5Filter input____ =
    Encode.maybeObject
        [ ( "eq", Encode.string |> Encode.optional input____.eq ), ( "neq", Encode.string |> Encode.optional input____.neq ), ( "in", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input____.in_ ), ( "notIn", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input____.notIn ) ]


buildUploadMimeTypeFilter :
    (UploadMimeTypeFilterOptionalFields -> UploadMimeTypeFilterOptionalFields)
    -> UploadMimeTypeFilter
buildUploadMimeTypeFilter fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { matches = Absent, notMatches = Absent, eq = Absent, neq = Absent, in_ = Absent, notIn = Absent }
    in
    { matches = optionals____.matches, notMatches = optionals____.notMatches, eq = optionals____.eq, neq = optionals____.neq, in_ = optionals____.in_, notIn = optionals____.notIn }


type alias UploadMimeTypeFilterOptionalFields =
    { matches : OptionalArgument StringMatchesFilter
    , notMatches : OptionalArgument StringMatchesFilter
    , eq : OptionalArgument String
    , neq : OptionalArgument String
    , in_ : OptionalArgument (List (Maybe String))
    , notIn : OptionalArgument (List (Maybe String))
    }


{-| Type for the UploadMimeTypeFilter input object.
-}
type alias UploadMimeTypeFilter =
    { matches : OptionalArgument StringMatchesFilter
    , notMatches : OptionalArgument StringMatchesFilter
    , eq : OptionalArgument String
    , neq : OptionalArgument String
    , in_ : OptionalArgument (List (Maybe String))
    , notIn : OptionalArgument (List (Maybe String))
    }


{-| Encode a UploadMimeTypeFilter into a value that can be used as an argument.
-}
encodeUploadMimeTypeFilter : UploadMimeTypeFilter -> Value
encodeUploadMimeTypeFilter input____ =
    Encode.maybeObject
        [ ( "matches", encodeStringMatchesFilter |> Encode.optional input____.matches ), ( "notMatches", encodeStringMatchesFilter |> Encode.optional input____.notMatches ), ( "eq", Encode.string |> Encode.optional input____.eq ), ( "neq", Encode.string |> Encode.optional input____.neq ), ( "in", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input____.in_ ), ( "notIn", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input____.notIn ) ]


buildUploadNotesFilter :
    (UploadNotesFilterOptionalFields -> UploadNotesFilterOptionalFields)
    -> UploadNotesFilter
buildUploadNotesFilter fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { matches = Absent, notMatches = Absent, exists = Absent }
    in
    { matches = optionals____.matches, notMatches = optionals____.notMatches, exists = optionals____.exists }


type alias UploadNotesFilterOptionalFields =
    { matches : OptionalArgument StringMatchesFilter
    , notMatches : OptionalArgument StringMatchesFilter
    , exists : OptionalArgument ScalarCodecs.BooleanType
    }


{-| Type for the UploadNotesFilter input object.
-}
type alias UploadNotesFilter =
    { matches : OptionalArgument StringMatchesFilter
    , notMatches : OptionalArgument StringMatchesFilter
    , exists : OptionalArgument ScalarCodecs.BooleanType
    }


{-| Encode a UploadNotesFilter into a value that can be used as an argument.
-}
encodeUploadNotesFilter : UploadNotesFilter -> Value
encodeUploadNotesFilter input____ =
    Encode.maybeObject
        [ ( "matches", encodeStringMatchesFilter |> Encode.optional input____.matches ), ( "notMatches", encodeStringMatchesFilter |> Encode.optional input____.notMatches ), ( "exists", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecBooleanType) |> Encode.optional input____.exists ) ]


buildUploadSizeFilter :
    (UploadSizeFilterOptionalFields -> UploadSizeFilterOptionalFields)
    -> UploadSizeFilter
buildUploadSizeFilter fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { gt = Absent, lt = Absent, gte = Absent, lte = Absent, eq = Absent, neq = Absent }
    in
    { gt = optionals____.gt, lt = optionals____.lt, gte = optionals____.gte, lte = optionals____.lte, eq = optionals____.eq, neq = optionals____.neq }


type alias UploadSizeFilterOptionalFields =
    { gt : OptionalArgument ScalarCodecs.IntType
    , lt : OptionalArgument ScalarCodecs.IntType
    , gte : OptionalArgument ScalarCodecs.IntType
    , lte : OptionalArgument ScalarCodecs.IntType
    , eq : OptionalArgument ScalarCodecs.IntType
    , neq : OptionalArgument ScalarCodecs.IntType
    }


{-| Type for the UploadSizeFilter input object.
-}
type alias UploadSizeFilter =
    { gt : OptionalArgument ScalarCodecs.IntType
    , lt : OptionalArgument ScalarCodecs.IntType
    , gte : OptionalArgument ScalarCodecs.IntType
    , lte : OptionalArgument ScalarCodecs.IntType
    , eq : OptionalArgument ScalarCodecs.IntType
    , neq : OptionalArgument ScalarCodecs.IntType
    }


{-| Encode a UploadSizeFilter into a value that can be used as an argument.
-}
encodeUploadSizeFilter : UploadSizeFilter -> Value
encodeUploadSizeFilter input____ =
    Encode.maybeObject
        [ ( "gt", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecIntType) |> Encode.optional input____.gt ), ( "lt", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecIntType) |> Encode.optional input____.lt ), ( "gte", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecIntType) |> Encode.optional input____.gte ), ( "lte", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecIntType) |> Encode.optional input____.lte ), ( "eq", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecIntType) |> Encode.optional input____.eq ), ( "neq", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecIntType) |> Encode.optional input____.neq ) ]


buildUploadTagsFilter :
    (UploadTagsFilterOptionalFields -> UploadTagsFilterOptionalFields)
    -> UploadTagsFilter
buildUploadTagsFilter fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { contains = Absent, allIn = Absent, anyIn = Absent, notIn = Absent, eq = Absent }
    in
    { contains = optionals____.contains, allIn = optionals____.allIn, anyIn = optionals____.anyIn, notIn = optionals____.notIn, eq = optionals____.eq }


type alias UploadTagsFilterOptionalFields =
    { contains : OptionalArgument String
    , allIn : OptionalArgument (List (Maybe String))
    , anyIn : OptionalArgument (List (Maybe String))
    , notIn : OptionalArgument (List (Maybe String))
    , eq : OptionalArgument (List (Maybe String))
    }


{-| Type for the UploadTagsFilter input object.
-}
type alias UploadTagsFilter =
    { contains : OptionalArgument String
    , allIn : OptionalArgument (List (Maybe String))
    , anyIn : OptionalArgument (List (Maybe String))
    , notIn : OptionalArgument (List (Maybe String))
    , eq : OptionalArgument (List (Maybe String))
    }


{-| Encode a UploadTagsFilter into a value that can be used as an argument.
-}
encodeUploadTagsFilter : UploadTagsFilter -> Value
encodeUploadTagsFilter input____ =
    Encode.maybeObject
        [ ( "contains", Encode.string |> Encode.optional input____.contains ), ( "allIn", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input____.allIn ), ( "anyIn", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input____.anyIn ), ( "notIn", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input____.notIn ), ( "eq", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input____.eq ) ]


buildUploadTitleFilter :
    (UploadTitleFilterOptionalFields -> UploadTitleFilterOptionalFields)
    -> UploadTitleFilter
buildUploadTitleFilter fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { matches = Absent, notMatches = Absent, eq = Absent, neq = Absent, in_ = Absent, notIn = Absent, exists = Absent }
    in
    { matches = optionals____.matches, notMatches = optionals____.notMatches, eq = optionals____.eq, neq = optionals____.neq, in_ = optionals____.in_, notIn = optionals____.notIn, exists = optionals____.exists }


type alias UploadTitleFilterOptionalFields =
    { matches : OptionalArgument StringMatchesFilter
    , notMatches : OptionalArgument StringMatchesFilter
    , eq : OptionalArgument String
    , neq : OptionalArgument String
    , in_ : OptionalArgument (List (Maybe String))
    , notIn : OptionalArgument (List (Maybe String))
    , exists : OptionalArgument ScalarCodecs.BooleanType
    }


{-| Type for the UploadTitleFilter input object.
-}
type alias UploadTitleFilter =
    { matches : OptionalArgument StringMatchesFilter
    , notMatches : OptionalArgument StringMatchesFilter
    , eq : OptionalArgument String
    , neq : OptionalArgument String
    , in_ : OptionalArgument (List (Maybe String))
    , notIn : OptionalArgument (List (Maybe String))
    , exists : OptionalArgument ScalarCodecs.BooleanType
    }


{-| Encode a UploadTitleFilter into a value that can be used as an argument.
-}
encodeUploadTitleFilter : UploadTitleFilter -> Value
encodeUploadTitleFilter input____ =
    Encode.maybeObject
        [ ( "matches", encodeStringMatchesFilter |> Encode.optional input____.matches ), ( "notMatches", encodeStringMatchesFilter |> Encode.optional input____.notMatches ), ( "eq", Encode.string |> Encode.optional input____.eq ), ( "neq", Encode.string |> Encode.optional input____.neq ), ( "in", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input____.in_ ), ( "notIn", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input____.notIn ), ( "exists", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecBooleanType) |> Encode.optional input____.exists ) ]


buildUploadUpdatedAtFilter :
    (UploadUpdatedAtFilterOptionalFields -> UploadUpdatedAtFilterOptionalFields)
    -> UploadUpdatedAtFilter
buildUploadUpdatedAtFilter fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { eq = Absent, neq = Absent, lt = Absent, lte = Absent, gt = Absent, gte = Absent }
    in
    { eq = optionals____.eq, neq = optionals____.neq, lt = optionals____.lt, lte = optionals____.lte, gt = optionals____.gt, gte = optionals____.gte }


type alias UploadUpdatedAtFilterOptionalFields =
    { eq : OptionalArgument ScalarCodecs.DateTime
    , neq : OptionalArgument ScalarCodecs.DateTime
    , lt : OptionalArgument ScalarCodecs.DateTime
    , lte : OptionalArgument ScalarCodecs.DateTime
    , gt : OptionalArgument ScalarCodecs.DateTime
    , gte : OptionalArgument ScalarCodecs.DateTime
    }


{-| Type for the UploadUpdatedAtFilter input object.
-}
type alias UploadUpdatedAtFilter =
    { eq : OptionalArgument ScalarCodecs.DateTime
    , neq : OptionalArgument ScalarCodecs.DateTime
    , lt : OptionalArgument ScalarCodecs.DateTime
    , lte : OptionalArgument ScalarCodecs.DateTime
    , gt : OptionalArgument ScalarCodecs.DateTime
    , gte : OptionalArgument ScalarCodecs.DateTime
    }


{-| Encode a UploadUpdatedAtFilter into a value that can be used as an argument.
-}
encodeUploadUpdatedAtFilter : UploadUpdatedAtFilter -> Value
encodeUploadUpdatedAtFilter input____ =
    Encode.maybeObject
        [ ( "eq", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input____.eq ), ( "neq", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input____.neq ), ( "lt", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input____.lt ), ( "lte", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input____.lte ), ( "gt", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input____.gt ), ( "gte", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input____.gte ) ]


buildUploadWidthFilter :
    (UploadWidthFilterOptionalFields -> UploadWidthFilterOptionalFields)
    -> UploadWidthFilter
buildUploadWidthFilter fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { gt = Absent, lt = Absent, gte = Absent, lte = Absent, eq = Absent, neq = Absent }
    in
    { gt = optionals____.gt, lt = optionals____.lt, gte = optionals____.gte, lte = optionals____.lte, eq = optionals____.eq, neq = optionals____.neq }


type alias UploadWidthFilterOptionalFields =
    { gt : OptionalArgument ScalarCodecs.IntType
    , lt : OptionalArgument ScalarCodecs.IntType
    , gte : OptionalArgument ScalarCodecs.IntType
    , lte : OptionalArgument ScalarCodecs.IntType
    , eq : OptionalArgument ScalarCodecs.IntType
    , neq : OptionalArgument ScalarCodecs.IntType
    }


{-| Type for the UploadWidthFilter input object.
-}
type alias UploadWidthFilter =
    { gt : OptionalArgument ScalarCodecs.IntType
    , lt : OptionalArgument ScalarCodecs.IntType
    , gte : OptionalArgument ScalarCodecs.IntType
    , lte : OptionalArgument ScalarCodecs.IntType
    , eq : OptionalArgument ScalarCodecs.IntType
    , neq : OptionalArgument ScalarCodecs.IntType
    }


{-| Encode a UploadWidthFilter into a value that can be used as an argument.
-}
encodeUploadWidthFilter : UploadWidthFilter -> Value
encodeUploadWidthFilter input____ =
    Encode.maybeObject
        [ ( "gt", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecIntType) |> Encode.optional input____.gt ), ( "lt", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecIntType) |> Encode.optional input____.lt ), ( "gte", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecIntType) |> Encode.optional input____.gte ), ( "lte", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecIntType) |> Encode.optional input____.lte ), ( "eq", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecIntType) |> Encode.optional input____.eq ), ( "neq", (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecIntType) |> Encode.optional input____.neq ) ]
