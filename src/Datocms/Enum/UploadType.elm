-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Datocms.Enum.UploadType exposing (..)

import Json.Decode as Decode exposing (Decoder)


type UploadType
    = Image
    | Audio
    | Video
    | Richtext
    | Presentation
    | Spreadsheet
    | Pdfdocument
    | Archive


list : List UploadType
list =
    [ Image, Audio, Video, Richtext, Presentation, Spreadsheet, Pdfdocument, Archive ]


decoder : Decoder UploadType
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "image" ->
                        Decode.succeed Image

                    "audio" ->
                        Decode.succeed Audio

                    "video" ->
                        Decode.succeed Video

                    "richtext" ->
                        Decode.succeed Richtext

                    "presentation" ->
                        Decode.succeed Presentation

                    "spreadsheet" ->
                        Decode.succeed Spreadsheet

                    "pdfdocument" ->
                        Decode.succeed Pdfdocument

                    "archive" ->
                        Decode.succeed Archive

                    _ ->
                        Decode.fail ("Invalid UploadType type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : UploadType -> String
toString enum____ =
    case enum____ of
        Image ->
            "image"

        Audio ->
            "audio"

        Video ->
            "video"

        Richtext ->
            "richtext"

        Presentation ->
            "presentation"

        Spreadsheet ->
            "spreadsheet"

        Pdfdocument ->
            "pdfdocument"

        Archive ->
            "archive"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe UploadType
fromString enumString____ =
    case enumString____ of
        "image" ->
            Just Image

        "audio" ->
            Just Audio

        "video" ->
            Just Video

        "richtext" ->
            Just Richtext

        "presentation" ->
            Just Presentation

        "spreadsheet" ->
            Just Spreadsheet

        "pdfdocument" ->
            Just Pdfdocument

        "archive" ->
            Just Archive

        _ ->
            Nothing
