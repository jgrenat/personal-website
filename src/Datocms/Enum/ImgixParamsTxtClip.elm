-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Datocms.Enum.ImgixParamsTxtClip exposing (..)

import Json.Decode as Decode exposing (Decoder)


type ImgixParamsTxtClip
    = Start
    | Middle
    | End
    | Ellipsis


list : List ImgixParamsTxtClip
list =
    [ Start, Middle, End, Ellipsis ]


decoder : Decoder ImgixParamsTxtClip
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "start" ->
                        Decode.succeed Start

                    "middle" ->
                        Decode.succeed Middle

                    "end" ->
                        Decode.succeed End

                    "ellipsis" ->
                        Decode.succeed Ellipsis

                    _ ->
                        Decode.fail ("Invalid ImgixParamsTxtClip type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : ImgixParamsTxtClip -> String
toString enum____ =
    case enum____ of
        Start ->
            "start"

        Middle ->
            "middle"

        End ->
            "end"

        Ellipsis ->
            "ellipsis"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe ImgixParamsTxtClip
fromString enumString____ =
    case enumString____ of
        "start" ->
            Just Start

        "middle" ->
            Just Middle

        "end" ->
            Just End

        "ellipsis" ->
            Just Ellipsis

        _ ->
            Nothing
