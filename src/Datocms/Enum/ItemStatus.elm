-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Datocms.Enum.ItemStatus exposing (..)

import Json.Decode as Decode exposing (Decoder)


type ItemStatus
    = Draft
    | Updated
    | Published


list : List ItemStatus
list =
    [ Draft, Updated, Published ]


decoder : Decoder ItemStatus
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "draft" ->
                        Decode.succeed Draft

                    "updated" ->
                        Decode.succeed Updated

                    "published" ->
                        Decode.succeed Published

                    _ ->
                        Decode.fail ("Invalid ItemStatus type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : ItemStatus -> String
toString enum____ =
    case enum____ of
        Draft ->
            "draft"

        Updated ->
            "updated"

        Published ->
            "published"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe ItemStatus
fromString enumString____ =
    case enumString____ of
        "draft" ->
            Just Draft

        "updated" ->
            Just Updated

        "published" ->
            Just Published

        _ ->
            Nothing
