-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Datocms.Enum.ColorBucketType exposing (..)

import Json.Decode as Decode exposing (Decoder)


type ColorBucketType
    = Red
    | Orange
    | Pink
    | Cyan
    | Purple
    | Blue
    | Yellow
    | Green
    | Brown
    | Grey
    | White
    | Black


list : List ColorBucketType
list =
    [ Red, Orange, Pink, Cyan, Purple, Blue, Yellow, Green, Brown, Grey, White, Black ]


decoder : Decoder ColorBucketType
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "red" ->
                        Decode.succeed Red

                    "orange" ->
                        Decode.succeed Orange

                    "pink" ->
                        Decode.succeed Pink

                    "cyan" ->
                        Decode.succeed Cyan

                    "purple" ->
                        Decode.succeed Purple

                    "blue" ->
                        Decode.succeed Blue

                    "yellow" ->
                        Decode.succeed Yellow

                    "green" ->
                        Decode.succeed Green

                    "brown" ->
                        Decode.succeed Brown

                    "grey" ->
                        Decode.succeed Grey

                    "white" ->
                        Decode.succeed White

                    "black" ->
                        Decode.succeed Black

                    _ ->
                        Decode.fail ("Invalid ColorBucketType type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : ColorBucketType -> String
toString enum____ =
    case enum____ of
        Red ->
            "red"

        Orange ->
            "orange"

        Pink ->
            "pink"

        Cyan ->
            "cyan"

        Purple ->
            "purple"

        Blue ->
            "blue"

        Yellow ->
            "yellow"

        Green ->
            "green"

        Brown ->
            "brown"

        Grey ->
            "grey"

        White ->
            "white"

        Black ->
            "black"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe ColorBucketType
fromString enumString____ =
    case enumString____ of
        "red" ->
            Just Red

        "orange" ->
            Just Orange

        "pink" ->
            Just Pink

        "cyan" ->
            Just Cyan

        "purple" ->
            Just Purple

        "blue" ->
            Just Blue

        "yellow" ->
            Just Yellow

        "green" ->
            Just Green

        "brown" ->
            Just Brown

        "grey" ->
            Just Grey

        "white" ->
            Just White

        "black" ->
            Just Black

        _ ->
            Nothing
