-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Datocms.Enum.UploadOrderBy exposing (..)

import Json.Decode as Decode exposing (Decoder)


type UploadOrderBy
    = CreatedAt_ASC_
    | CreatedAt_DESC_
    | Size_ASC
    | Size_DESC
    | Resolution_ASC
    | Resolution_DESC
    | Filename_ASC
    | Filename_DESC
    | Basename_ASC
    | Basename_DESC
    | MimeType_ASC
    | MimeType_DESC
    | Format_ASC
    | Format_DESC
    | UpdatedAt_ASC_
    | UpdatedAt_DESC_
    | Id_ASC
    | Id_DESC


list : List UploadOrderBy
list =
    [ CreatedAt_ASC_, CreatedAt_DESC_, Size_ASC, Size_DESC, Resolution_ASC, Resolution_DESC, Filename_ASC, Filename_DESC, Basename_ASC, Basename_DESC, MimeType_ASC, MimeType_DESC, Format_ASC, Format_DESC, UpdatedAt_ASC_, UpdatedAt_DESC_, Id_ASC, Id_DESC ]


decoder : Decoder UploadOrderBy
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "_createdAt_ASC" ->
                        Decode.succeed CreatedAt_ASC_

                    "_createdAt_DESC" ->
                        Decode.succeed CreatedAt_DESC_

                    "size_ASC" ->
                        Decode.succeed Size_ASC

                    "size_DESC" ->
                        Decode.succeed Size_DESC

                    "resolution_ASC" ->
                        Decode.succeed Resolution_ASC

                    "resolution_DESC" ->
                        Decode.succeed Resolution_DESC

                    "filename_ASC" ->
                        Decode.succeed Filename_ASC

                    "filename_DESC" ->
                        Decode.succeed Filename_DESC

                    "basename_ASC" ->
                        Decode.succeed Basename_ASC

                    "basename_DESC" ->
                        Decode.succeed Basename_DESC

                    "mimeType_ASC" ->
                        Decode.succeed MimeType_ASC

                    "mimeType_DESC" ->
                        Decode.succeed MimeType_DESC

                    "format_ASC" ->
                        Decode.succeed Format_ASC

                    "format_DESC" ->
                        Decode.succeed Format_DESC

                    "_updatedAt_ASC" ->
                        Decode.succeed UpdatedAt_ASC_

                    "_updatedAt_DESC" ->
                        Decode.succeed UpdatedAt_DESC_

                    "id_ASC" ->
                        Decode.succeed Id_ASC

                    "id_DESC" ->
                        Decode.succeed Id_DESC

                    _ ->
                        Decode.fail ("Invalid UploadOrderBy type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : UploadOrderBy -> String
toString enum____ =
    case enum____ of
        CreatedAt_ASC_ ->
            "_createdAt_ASC"

        CreatedAt_DESC_ ->
            "_createdAt_DESC"

        Size_ASC ->
            "size_ASC"

        Size_DESC ->
            "size_DESC"

        Resolution_ASC ->
            "resolution_ASC"

        Resolution_DESC ->
            "resolution_DESC"

        Filename_ASC ->
            "filename_ASC"

        Filename_DESC ->
            "filename_DESC"

        Basename_ASC ->
            "basename_ASC"

        Basename_DESC ->
            "basename_DESC"

        MimeType_ASC ->
            "mimeType_ASC"

        MimeType_DESC ->
            "mimeType_DESC"

        Format_ASC ->
            "format_ASC"

        Format_DESC ->
            "format_DESC"

        UpdatedAt_ASC_ ->
            "_updatedAt_ASC"

        UpdatedAt_DESC_ ->
            "_updatedAt_DESC"

        Id_ASC ->
            "id_ASC"

        Id_DESC ->
            "id_DESC"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe UploadOrderBy
fromString enumString____ =
    case enumString____ of
        "_createdAt_ASC" ->
            Just CreatedAt_ASC_

        "_createdAt_DESC" ->
            Just CreatedAt_DESC_

        "size_ASC" ->
            Just Size_ASC

        "size_DESC" ->
            Just Size_DESC

        "resolution_ASC" ->
            Just Resolution_ASC

        "resolution_DESC" ->
            Just Resolution_DESC

        "filename_ASC" ->
            Just Filename_ASC

        "filename_DESC" ->
            Just Filename_DESC

        "basename_ASC" ->
            Just Basename_ASC

        "basename_DESC" ->
            Just Basename_DESC

        "mimeType_ASC" ->
            Just MimeType_ASC

        "mimeType_DESC" ->
            Just MimeType_DESC

        "format_ASC" ->
            Just Format_ASC

        "format_DESC" ->
            Just Format_DESC

        "_updatedAt_ASC" ->
            Just UpdatedAt_ASC_

        "_updatedAt_DESC" ->
            Just UpdatedAt_DESC_

        "id_ASC" ->
            Just Id_ASC

        "id_DESC" ->
            Just Id_DESC

        _ ->
            Nothing
