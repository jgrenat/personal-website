-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Datocms.Enum.ImgixParamsFm exposing (..)

import Json.Decode as Decode exposing (Decoder)


type ImgixParamsFm
    = Gif
    | Jpg
    | Jp2
    | Json
    | Jxr
    | Pjpg
    | Mp4
    | Png
    | Png8
    | Png32
    | Webp
    | Webm


list : List ImgixParamsFm
list =
    [ Gif, Jpg, Jp2, Json, Jxr, Pjpg, Mp4, Png, Png8, Png32, Webp, Webm ]


decoder : Decoder ImgixParamsFm
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "gif" ->
                        Decode.succeed Gif

                    "jpg" ->
                        Decode.succeed Jpg

                    "jp2" ->
                        Decode.succeed Jp2

                    "json" ->
                        Decode.succeed Json

                    "jxr" ->
                        Decode.succeed Jxr

                    "pjpg" ->
                        Decode.succeed Pjpg

                    "mp4" ->
                        Decode.succeed Mp4

                    "png" ->
                        Decode.succeed Png

                    "png8" ->
                        Decode.succeed Png8

                    "png32" ->
                        Decode.succeed Png32

                    "webp" ->
                        Decode.succeed Webp

                    "webm" ->
                        Decode.succeed Webm

                    _ ->
                        Decode.fail ("Invalid ImgixParamsFm type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : ImgixParamsFm -> String
toString enum____ =
    case enum____ of
        Gif ->
            "gif"

        Jpg ->
            "jpg"

        Jp2 ->
            "jp2"

        Json ->
            "json"

        Jxr ->
            "jxr"

        Pjpg ->
            "pjpg"

        Mp4 ->
            "mp4"

        Png ->
            "png"

        Png8 ->
            "png8"

        Png32 ->
            "png32"

        Webp ->
            "webp"

        Webm ->
            "webm"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe ImgixParamsFm
fromString enumString____ =
    case enumString____ of
        "gif" ->
            Just Gif

        "jpg" ->
            Just Jpg

        "jp2" ->
            Just Jp2

        "json" ->
            Just Json

        "jxr" ->
            Just Jxr

        "pjpg" ->
            Just Pjpg

        "mp4" ->
            Just Mp4

        "png" ->
            Just Png

        "png8" ->
            Just Png8

        "png32" ->
            Just Png32

        "webp" ->
            Just Webp

        "webm" ->
            Just Webm

        _ ->
            Nothing
