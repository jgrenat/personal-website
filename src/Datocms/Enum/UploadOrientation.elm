-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Datocms.Enum.UploadOrientation exposing (..)

import Json.Decode as Decode exposing (Decoder)


type UploadOrientation
    = Landscape
    | Portrait
    | Square


list : List UploadOrientation
list =
    [ Landscape, Portrait, Square ]


decoder : Decoder UploadOrientation
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "landscape" ->
                        Decode.succeed Landscape

                    "portrait" ->
                        Decode.succeed Portrait

                    "square" ->
                        Decode.succeed Square

                    _ ->
                        Decode.fail ("Invalid UploadOrientation type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : UploadOrientation -> String
toString enum____ =
    case enum____ of
        Landscape ->
            "landscape"

        Portrait ->
            "portrait"

        Square ->
            "square"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe UploadOrientation
fromString enumString____ =
    case enumString____ of
        "landscape" ->
            Just Landscape

        "portrait" ->
            Just Portrait

        "square" ->
            Just Square

        _ ->
            Nothing
