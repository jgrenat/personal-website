-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Datocms.Enum.ImgixParamsFit exposing (..)

import Json.Decode as Decode exposing (Decoder)


type ImgixParamsFit
    = Clamp
    | Clip
    | Crop
    | Facearea
    | Fill
    | Fillmax
    | Max
    | Min
    | Scale


list : List ImgixParamsFit
list =
    [ Clamp, Clip, Crop, Facearea, Fill, Fillmax, Max, Min, Scale ]


decoder : Decoder ImgixParamsFit
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "clamp" ->
                        Decode.succeed Clamp

                    "clip" ->
                        Decode.succeed Clip

                    "crop" ->
                        Decode.succeed Crop

                    "facearea" ->
                        Decode.succeed Facearea

                    "fill" ->
                        Decode.succeed Fill

                    "fillmax" ->
                        Decode.succeed Fillmax

                    "max" ->
                        Decode.succeed Max

                    "min" ->
                        Decode.succeed Min

                    "scale" ->
                        Decode.succeed Scale

                    _ ->
                        Decode.fail ("Invalid ImgixParamsFit type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : ImgixParamsFit -> String
toString enum____ =
    case enum____ of
        Clamp ->
            "clamp"

        Clip ->
            "clip"

        Crop ->
            "crop"

        Facearea ->
            "facearea"

        Fill ->
            "fill"

        Fillmax ->
            "fillmax"

        Max ->
            "max"

        Min ->
            "min"

        Scale ->
            "scale"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe ImgixParamsFit
fromString enumString____ =
    case enumString____ of
        "clamp" ->
            Just Clamp

        "clip" ->
            Just Clip

        "crop" ->
            Just Crop

        "facearea" ->
            Just Facearea

        "fill" ->
            Just Fill

        "fillmax" ->
            Just Fillmax

        "max" ->
            Just Max

        "min" ->
            Just Min

        "scale" ->
            Just Scale

        _ ->
            Nothing
