-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Datocms.Enum.ImgixParamsPalette exposing (..)

import Json.Decode as Decode exposing (Decoder)


type ImgixParamsPalette
    = Css
    | Json


list : List ImgixParamsPalette
list =
    [ Css, Json ]


decoder : Decoder ImgixParamsPalette
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "css" ->
                        Decode.succeed Css

                    "json" ->
                        Decode.succeed Json

                    _ ->
                        Decode.fail ("Invalid ImgixParamsPalette type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : ImgixParamsPalette -> String
toString enum____ =
    case enum____ of
        Css ->
            "css"

        Json ->
            "json"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe ImgixParamsPalette
fromString enumString____ =
    case enumString____ of
        "css" ->
            Just Css

        "json" ->
            Just Json

        _ ->
            Nothing
