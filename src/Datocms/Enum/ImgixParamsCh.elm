-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Datocms.Enum.ImgixParamsCh exposing (..)

import Json.Decode as Decode exposing (Decoder)


type ImgixParamsCh
    = Width
    | Dpr
    | SaveData


list : List ImgixParamsCh
list =
    [ Width, Dpr, SaveData ]


decoder : Decoder ImgixParamsCh
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "width" ->
                        Decode.succeed Width

                    "dpr" ->
                        Decode.succeed Dpr

                    "saveData" ->
                        Decode.succeed SaveData

                    _ ->
                        Decode.fail ("Invalid ImgixParamsCh type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : ImgixParamsCh -> String
toString enum____ =
    case enum____ of
        Width ->
            "width"

        Dpr ->
            "dpr"

        SaveData ->
            "saveData"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe ImgixParamsCh
fromString enumString____ =
    case enumString____ of
        "width" ->
            Just Width

        "dpr" ->
            Just Dpr

        "saveData" ->
            Just SaveData

        _ ->
            Nothing
