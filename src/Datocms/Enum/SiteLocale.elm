-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Datocms.Enum.SiteLocale exposing (..)

import Json.Decode as Decode exposing (Decoder)


type SiteLocale
    = Fr
    | En


list : List SiteLocale
list =
    [ Fr, En ]


decoder : Decoder SiteLocale
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "fr" ->
                        Decode.succeed Fr

                    "en" ->
                        Decode.succeed En

                    _ ->
                        Decode.fail ("Invalid SiteLocale type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : SiteLocale -> String
toString enum____ =
    case enum____ of
        Fr ->
            "fr"

        En ->
            "en"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe SiteLocale
fromString enumString____ =
    case enumString____ of
        "fr" ->
            Just Fr

        "en" ->
            Just En

        _ ->
            Nothing
