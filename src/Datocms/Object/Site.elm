-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Datocms.Object.Site exposing (..)

import Datocms.Enum.FaviconType
import Datocms.Enum.SiteLocale
import Datocms.InputObject
import Datocms.Interface
import Datocms.Object
import Datocms.Scalar
import Datocms.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode
import ScalarCodecs


favicon :
    SelectionSet decodesTo Datocms.Object.FileField
    -> SelectionSet (Maybe decodesTo) Datocms.Object.Site
favicon object____ =
    Object.selectionForCompositeField "favicon" [] object____ (Basics.identity >> Decode.nullable)


type alias FaviconMetaTagsOptionalArguments =
    { variants : OptionalArgument (List (Maybe Datocms.Enum.FaviconType.FaviconType)) }


{-|

  - variants - The variants to build

-}
faviconMetaTags :
    (FaviconMetaTagsOptionalArguments -> FaviconMetaTagsOptionalArguments)
    -> SelectionSet decodesTo Datocms.Object.Tag
    -> SelectionSet (List decodesTo) Datocms.Object.Site
faviconMetaTags fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { variants = Absent }

        optionalArgs____ =
            [ Argument.optional "variants" filledInOptionals____.variants (Encode.enum Datocms.Enum.FaviconType.toString |> Encode.maybe |> Encode.list) ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "faviconMetaTags" optionalArgs____ object____ (Basics.identity >> Decode.list)


type alias GlobalSeoOptionalArguments =
    { locale : OptionalArgument Datocms.Enum.SiteLocale.SiteLocale }


{-|

  - locale - The locale to use to fetch the field's content

-}
globalSeo :
    (GlobalSeoOptionalArguments -> GlobalSeoOptionalArguments)
    -> SelectionSet decodesTo Datocms.Object.GlobalSeoField
    -> SelectionSet (Maybe decodesTo) Datocms.Object.Site
globalSeo fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { locale = Absent }

        optionalArgs____ =
            [ Argument.optional "locale" filledInOptionals____.locale (Encode.enum Datocms.Enum.SiteLocale.toString) ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "globalSeo" optionalArgs____ object____ (Basics.identity >> Decode.nullable)
