-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Datocms.Object.HomePageRecord exposing (..)

import Datocms.Enum.ItemStatus
import Datocms.Enum.SiteLocale
import Datocms.InputObject
import Datocms.Interface
import Datocms.Object
import Datocms.Scalar
import Datocms.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode
import ScalarCodecs


type alias AllIntroductionTextLocalesOptionalArguments =
    { markdown : OptionalArgument Bool
    , locale : OptionalArgument Datocms.Enum.SiteLocale.SiteLocale
    }


{-|

  - markdown - Process content as markdown
  - locale - The locale to use to fetch the field's content

-}
allIntroductionTextLocales_ :
    (AllIntroductionTextLocalesOptionalArguments -> AllIntroductionTextLocalesOptionalArguments)
    -> SelectionSet decodesTo Datocms.Object.StringMultiLocaleField
    -> SelectionSet (Maybe (List (Maybe decodesTo))) Datocms.Object.HomePageRecord
allIntroductionTextLocales_ fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { markdown = Absent, locale = Absent }

        optionalArgs____ =
            [ Argument.optional "markdown" filledInOptionals____.markdown Encode.bool, Argument.optional "locale" filledInOptionals____.locale (Encode.enum Datocms.Enum.SiteLocale.toString) ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "_allIntroductionTextLocales" optionalArgs____ object____ (Basics.identity >> Decode.nullable >> Decode.list >> Decode.nullable)


type alias AllLastArticlesTitleLocalesOptionalArguments =
    { locale : OptionalArgument Datocms.Enum.SiteLocale.SiteLocale }


{-|

  - locale - The locale to use to fetch the field's content

-}
allLastArticlesTitleLocales_ :
    (AllLastArticlesTitleLocalesOptionalArguments -> AllLastArticlesTitleLocalesOptionalArguments)
    -> SelectionSet decodesTo Datocms.Object.StringMultiLocaleField
    -> SelectionSet (Maybe (List (Maybe decodesTo))) Datocms.Object.HomePageRecord
allLastArticlesTitleLocales_ fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { locale = Absent }

        optionalArgs____ =
            [ Argument.optional "locale" filledInOptionals____.locale (Encode.enum Datocms.Enum.SiteLocale.toString) ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "_allLastArticlesTitleLocales" optionalArgs____ object____ (Basics.identity >> Decode.nullable >> Decode.list >> Decode.nullable)


type alias AllLastVideosTitleLocalesOptionalArguments =
    { locale : OptionalArgument Datocms.Enum.SiteLocale.SiteLocale }


{-|

  - locale - The locale to use to fetch the field's content

-}
allLastVideosTitleLocales_ :
    (AllLastVideosTitleLocalesOptionalArguments -> AllLastVideosTitleLocalesOptionalArguments)
    -> SelectionSet decodesTo Datocms.Object.StringMultiLocaleField
    -> SelectionSet (Maybe (List (Maybe decodesTo))) Datocms.Object.HomePageRecord
allLastVideosTitleLocales_ fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { locale = Absent }

        optionalArgs____ =
            [ Argument.optional "locale" filledInOptionals____.locale (Encode.enum Datocms.Enum.SiteLocale.toString) ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "_allLastVideosTitleLocales" optionalArgs____ object____ (Basics.identity >> Decode.nullable >> Decode.list >> Decode.nullable)


type alias AllTitleLocalesOptionalArguments =
    { locale : OptionalArgument Datocms.Enum.SiteLocale.SiteLocale }


{-|

  - locale - The locale to use to fetch the field's content

-}
allTitleLocales_ :
    (AllTitleLocalesOptionalArguments -> AllTitleLocalesOptionalArguments)
    -> SelectionSet decodesTo Datocms.Object.StringMultiLocaleField
    -> SelectionSet (Maybe (List (Maybe decodesTo))) Datocms.Object.HomePageRecord
allTitleLocales_ fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { locale = Absent }

        optionalArgs____ =
            [ Argument.optional "locale" filledInOptionals____.locale (Encode.enum Datocms.Enum.SiteLocale.toString) ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "_allTitleLocales" optionalArgs____ object____ (Basics.identity >> Decode.nullable >> Decode.list >> Decode.nullable)


createdAt_ : SelectionSet ScalarCodecs.DateTime Datocms.Object.HomePageRecord
createdAt_ =
    Object.selectionForField "ScalarCodecs.DateTime" "_createdAt" [] (ScalarCodecs.codecs |> Datocms.Scalar.unwrapCodecs |> .codecDateTime |> .decoder)


firstPublishedAt_ : SelectionSet (Maybe ScalarCodecs.DateTime) Datocms.Object.HomePageRecord
firstPublishedAt_ =
    Object.selectionForField "(Maybe ScalarCodecs.DateTime)" "_firstPublishedAt" [] (ScalarCodecs.codecs |> Datocms.Scalar.unwrapCodecs |> .codecDateTime |> .decoder |> Decode.nullable)


isValid_ : SelectionSet ScalarCodecs.BooleanType Datocms.Object.HomePageRecord
isValid_ =
    Object.selectionForField "ScalarCodecs.BooleanType" "_isValid" [] (ScalarCodecs.codecs |> Datocms.Scalar.unwrapCodecs |> .codecBooleanType |> .decoder)


modelApiKey_ : SelectionSet String Datocms.Object.HomePageRecord
modelApiKey_ =
    Object.selectionForField "String" "_modelApiKey" [] Decode.string


publicationScheduledAt_ : SelectionSet (Maybe ScalarCodecs.DateTime) Datocms.Object.HomePageRecord
publicationScheduledAt_ =
    Object.selectionForField "(Maybe ScalarCodecs.DateTime)" "_publicationScheduledAt" [] (ScalarCodecs.codecs |> Datocms.Scalar.unwrapCodecs |> .codecDateTime |> .decoder |> Decode.nullable)


publishedAt_ : SelectionSet (Maybe ScalarCodecs.DateTime) Datocms.Object.HomePageRecord
publishedAt_ =
    Object.selectionForField "(Maybe ScalarCodecs.DateTime)" "_publishedAt" [] (ScalarCodecs.codecs |> Datocms.Scalar.unwrapCodecs |> .codecDateTime |> .decoder |> Decode.nullable)


type alias SeoMetaTagsOptionalArguments =
    { locale : OptionalArgument Datocms.Enum.SiteLocale.SiteLocale }


{-| SEO meta tags

  - locale - The locale to use to fetch the field's content

-}
seoMetaTags_ :
    (SeoMetaTagsOptionalArguments -> SeoMetaTagsOptionalArguments)
    -> SelectionSet decodesTo Datocms.Object.Tag
    -> SelectionSet (List decodesTo) Datocms.Object.HomePageRecord
seoMetaTags_ fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { locale = Absent }

        optionalArgs____ =
            [ Argument.optional "locale" filledInOptionals____.locale (Encode.enum Datocms.Enum.SiteLocale.toString) ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "_seoMetaTags" optionalArgs____ object____ (Basics.identity >> Decode.list)


status_ : SelectionSet Datocms.Enum.ItemStatus.ItemStatus Datocms.Object.HomePageRecord
status_ =
    Object.selectionForField "Enum.ItemStatus.ItemStatus" "_status" [] Datocms.Enum.ItemStatus.decoder


unpublishingScheduledAt_ : SelectionSet (Maybe ScalarCodecs.DateTime) Datocms.Object.HomePageRecord
unpublishingScheduledAt_ =
    Object.selectionForField "(Maybe ScalarCodecs.DateTime)" "_unpublishingScheduledAt" [] (ScalarCodecs.codecs |> Datocms.Scalar.unwrapCodecs |> .codecDateTime |> .decoder |> Decode.nullable)


updatedAt_ : SelectionSet ScalarCodecs.DateTime Datocms.Object.HomePageRecord
updatedAt_ =
    Object.selectionForField "ScalarCodecs.DateTime" "_updatedAt" [] (ScalarCodecs.codecs |> Datocms.Scalar.unwrapCodecs |> .codecDateTime |> .decoder)


createdAt : SelectionSet ScalarCodecs.DateTime Datocms.Object.HomePageRecord
createdAt =
    Object.selectionForField "ScalarCodecs.DateTime" "createdAt" [] (ScalarCodecs.codecs |> Datocms.Scalar.unwrapCodecs |> .codecDateTime |> .decoder)


id : SelectionSet ScalarCodecs.ItemId Datocms.Object.HomePageRecord
id =
    Object.selectionForField "ScalarCodecs.ItemId" "id" [] (ScalarCodecs.codecs |> Datocms.Scalar.unwrapCodecs |> .codecItemId |> .decoder)


type alias IntroductionTextOptionalArguments =
    { markdown : OptionalArgument Bool
    , locale : OptionalArgument Datocms.Enum.SiteLocale.SiteLocale
    }


{-|

  - markdown - Process content as markdown
  - locale - The locale to use to fetch the field's content

-}
introductionText :
    (IntroductionTextOptionalArguments -> IntroductionTextOptionalArguments)
    -> SelectionSet (Maybe String) Datocms.Object.HomePageRecord
introductionText fillInOptionals____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { markdown = Absent, locale = Absent }

        optionalArgs____ =
            [ Argument.optional "markdown" filledInOptionals____.markdown Encode.bool, Argument.optional "locale" filledInOptionals____.locale (Encode.enum Datocms.Enum.SiteLocale.toString) ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForField "(Maybe String)" "introductionText" optionalArgs____ (Decode.string |> Decode.nullable)


type alias LastArticlesTitleOptionalArguments =
    { locale : OptionalArgument Datocms.Enum.SiteLocale.SiteLocale }


{-|

  - locale - The locale to use to fetch the field's content

-}
lastArticlesTitle :
    (LastArticlesTitleOptionalArguments -> LastArticlesTitleOptionalArguments)
    -> SelectionSet (Maybe String) Datocms.Object.HomePageRecord
lastArticlesTitle fillInOptionals____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { locale = Absent }

        optionalArgs____ =
            [ Argument.optional "locale" filledInOptionals____.locale (Encode.enum Datocms.Enum.SiteLocale.toString) ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForField "(Maybe String)" "lastArticlesTitle" optionalArgs____ (Decode.string |> Decode.nullable)


type alias LastVideosTitleOptionalArguments =
    { locale : OptionalArgument Datocms.Enum.SiteLocale.SiteLocale }


{-|

  - locale - The locale to use to fetch the field's content

-}
lastVideosTitle :
    (LastVideosTitleOptionalArguments -> LastVideosTitleOptionalArguments)
    -> SelectionSet (Maybe String) Datocms.Object.HomePageRecord
lastVideosTitle fillInOptionals____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { locale = Absent }

        optionalArgs____ =
            [ Argument.optional "locale" filledInOptionals____.locale (Encode.enum Datocms.Enum.SiteLocale.toString) ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForField "(Maybe String)" "lastVideosTitle" optionalArgs____ (Decode.string |> Decode.nullable)


picture :
    SelectionSet decodesTo Datocms.Object.FileField
    -> SelectionSet (Maybe decodesTo) Datocms.Object.HomePageRecord
picture object____ =
    Object.selectionForCompositeField "picture" [] object____ (Basics.identity >> Decode.nullable)


type alias TitleOptionalArguments =
    { locale : OptionalArgument Datocms.Enum.SiteLocale.SiteLocale }


{-|

  - locale - The locale to use to fetch the field's content

-}
title :
    (TitleOptionalArguments -> TitleOptionalArguments)
    -> SelectionSet (Maybe String) Datocms.Object.HomePageRecord
title fillInOptionals____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { locale = Absent }

        optionalArgs____ =
            [ Argument.optional "locale" filledInOptionals____.locale (Encode.enum Datocms.Enum.SiteLocale.toString) ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForField "(Maybe String)" "title" optionalArgs____ (Decode.string |> Decode.nullable)


updatedAt : SelectionSet ScalarCodecs.DateTime Datocms.Object.HomePageRecord
updatedAt =
    Object.selectionForField "ScalarCodecs.DateTime" "updatedAt" [] (ScalarCodecs.codecs |> Datocms.Scalar.unwrapCodecs |> .codecDateTime |> .decoder)
