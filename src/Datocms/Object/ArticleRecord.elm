-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Datocms.Object.ArticleRecord exposing (..)

import Datocms.Enum.ItemStatus
import Datocms.Enum.SiteLocale
import Datocms.InputObject
import Datocms.Interface
import Datocms.Object
import Datocms.Scalar
import Datocms.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode
import ScalarCodecs


type alias AllBannerAttributionLocalesOptionalArguments =
    { locale : OptionalArgument Datocms.Enum.SiteLocale.SiteLocale }


{-|

  - locale - The locale to use to fetch the field's content

-}
allBannerAttributionLocales_ :
    (AllBannerAttributionLocalesOptionalArguments -> AllBannerAttributionLocalesOptionalArguments)
    -> SelectionSet decodesTo Datocms.Object.BannerAttributionRecordListMultiLocaleField
    -> SelectionSet (Maybe (List (Maybe decodesTo))) Datocms.Object.ArticleRecord
allBannerAttributionLocales_ fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { locale = Absent }

        optionalArgs____ =
            [ Argument.optional "locale" filledInOptionals____.locale (Encode.enum Datocms.Enum.SiteLocale.toString) ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "_allBannerAttributionLocales" optionalArgs____ object____ (Basics.identity >> Decode.nullable >> Decode.list >> Decode.nullable)


type alias AllContentLocalesOptionalArguments =
    { locale : OptionalArgument Datocms.Enum.SiteLocale.SiteLocale }


{-|

  - locale - The locale to use to fetch the field's content

-}
allContentLocales_ :
    (AllContentLocalesOptionalArguments -> AllContentLocalesOptionalArguments)
    -> SelectionSet decodesTo Datocms.Object.ArticleModelContentFieldMultiLocaleField
    -> SelectionSet (Maybe (List (Maybe decodesTo))) Datocms.Object.ArticleRecord
allContentLocales_ fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { locale = Absent }

        optionalArgs____ =
            [ Argument.optional "locale" filledInOptionals____.locale (Encode.enum Datocms.Enum.SiteLocale.toString) ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "_allContentLocales" optionalArgs____ object____ (Basics.identity >> Decode.nullable >> Decode.list >> Decode.nullable)


type alias AllDescriptionLocalesOptionalArguments =
    { markdown : OptionalArgument Bool
    , locale : OptionalArgument Datocms.Enum.SiteLocale.SiteLocale
    }


{-|

  - markdown - Process content as markdown
  - locale - The locale to use to fetch the field's content

-}
allDescriptionLocales_ :
    (AllDescriptionLocalesOptionalArguments -> AllDescriptionLocalesOptionalArguments)
    -> SelectionSet decodesTo Datocms.Object.StringMultiLocaleField
    -> SelectionSet (Maybe (List (Maybe decodesTo))) Datocms.Object.ArticleRecord
allDescriptionLocales_ fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { markdown = Absent, locale = Absent }

        optionalArgs____ =
            [ Argument.optional "markdown" filledInOptionals____.markdown Encode.bool, Argument.optional "locale" filledInOptionals____.locale (Encode.enum Datocms.Enum.SiteLocale.toString) ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "_allDescriptionLocales" optionalArgs____ object____ (Basics.identity >> Decode.nullable >> Decode.list >> Decode.nullable)


type alias AllNameLocalesOptionalArguments =
    { locale : OptionalArgument Datocms.Enum.SiteLocale.SiteLocale }


{-|

  - locale - The locale to use to fetch the field's content

-}
allNameLocales_ :
    (AllNameLocalesOptionalArguments -> AllNameLocalesOptionalArguments)
    -> SelectionSet decodesTo Datocms.Object.StringMultiLocaleField
    -> SelectionSet (Maybe (List (Maybe decodesTo))) Datocms.Object.ArticleRecord
allNameLocales_ fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { locale = Absent }

        optionalArgs____ =
            [ Argument.optional "locale" filledInOptionals____.locale (Encode.enum Datocms.Enum.SiteLocale.toString) ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "_allNameLocales" optionalArgs____ object____ (Basics.identity >> Decode.nullable >> Decode.list >> Decode.nullable)


type alias AllSlugLocalesOptionalArguments =
    { locale : OptionalArgument Datocms.Enum.SiteLocale.SiteLocale }


{-|

  - locale - The locale to use to fetch the field's content

-}
allSlugLocales_ :
    (AllSlugLocalesOptionalArguments -> AllSlugLocalesOptionalArguments)
    -> SelectionSet decodesTo Datocms.Object.StringMultiLocaleField
    -> SelectionSet (Maybe (List (Maybe decodesTo))) Datocms.Object.ArticleRecord
allSlugLocales_ fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { locale = Absent }

        optionalArgs____ =
            [ Argument.optional "locale" filledInOptionals____.locale (Encode.enum Datocms.Enum.SiteLocale.toString) ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "_allSlugLocales" optionalArgs____ object____ (Basics.identity >> Decode.nullable >> Decode.list >> Decode.nullable)


createdAt_ : SelectionSet ScalarCodecs.DateTime Datocms.Object.ArticleRecord
createdAt_ =
    Object.selectionForField "ScalarCodecs.DateTime" "_createdAt" [] (ScalarCodecs.codecs |> Datocms.Scalar.unwrapCodecs |> .codecDateTime |> .decoder)


firstPublishedAt_ : SelectionSet (Maybe ScalarCodecs.DateTime) Datocms.Object.ArticleRecord
firstPublishedAt_ =
    Object.selectionForField "(Maybe ScalarCodecs.DateTime)" "_firstPublishedAt" [] (ScalarCodecs.codecs |> Datocms.Scalar.unwrapCodecs |> .codecDateTime |> .decoder |> Decode.nullable)


isValid_ : SelectionSet ScalarCodecs.BooleanType Datocms.Object.ArticleRecord
isValid_ =
    Object.selectionForField "ScalarCodecs.BooleanType" "_isValid" [] (ScalarCodecs.codecs |> Datocms.Scalar.unwrapCodecs |> .codecBooleanType |> .decoder)


modelApiKey_ : SelectionSet String Datocms.Object.ArticleRecord
modelApiKey_ =
    Object.selectionForField "String" "_modelApiKey" [] Decode.string


publicationScheduledAt_ : SelectionSet (Maybe ScalarCodecs.DateTime) Datocms.Object.ArticleRecord
publicationScheduledAt_ =
    Object.selectionForField "(Maybe ScalarCodecs.DateTime)" "_publicationScheduledAt" [] (ScalarCodecs.codecs |> Datocms.Scalar.unwrapCodecs |> .codecDateTime |> .decoder |> Decode.nullable)


publishedAt_ : SelectionSet (Maybe ScalarCodecs.DateTime) Datocms.Object.ArticleRecord
publishedAt_ =
    Object.selectionForField "(Maybe ScalarCodecs.DateTime)" "_publishedAt" [] (ScalarCodecs.codecs |> Datocms.Scalar.unwrapCodecs |> .codecDateTime |> .decoder |> Decode.nullable)


type alias SeoMetaTagsOptionalArguments =
    { locale : OptionalArgument Datocms.Enum.SiteLocale.SiteLocale }


{-| SEO meta tags

  - locale - The locale to use to fetch the field's content

-}
seoMetaTags_ :
    (SeoMetaTagsOptionalArguments -> SeoMetaTagsOptionalArguments)
    -> SelectionSet decodesTo Datocms.Object.Tag
    -> SelectionSet (List decodesTo) Datocms.Object.ArticleRecord
seoMetaTags_ fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { locale = Absent }

        optionalArgs____ =
            [ Argument.optional "locale" filledInOptionals____.locale (Encode.enum Datocms.Enum.SiteLocale.toString) ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "_seoMetaTags" optionalArgs____ object____ (Basics.identity >> Decode.list)


status_ : SelectionSet Datocms.Enum.ItemStatus.ItemStatus Datocms.Object.ArticleRecord
status_ =
    Object.selectionForField "Enum.ItemStatus.ItemStatus" "_status" [] Datocms.Enum.ItemStatus.decoder


unpublishingScheduledAt_ : SelectionSet (Maybe ScalarCodecs.DateTime) Datocms.Object.ArticleRecord
unpublishingScheduledAt_ =
    Object.selectionForField "(Maybe ScalarCodecs.DateTime)" "_unpublishingScheduledAt" [] (ScalarCodecs.codecs |> Datocms.Scalar.unwrapCodecs |> .codecDateTime |> .decoder |> Decode.nullable)


updatedAt_ : SelectionSet ScalarCodecs.DateTime Datocms.Object.ArticleRecord
updatedAt_ =
    Object.selectionForField "ScalarCodecs.DateTime" "_updatedAt" [] (ScalarCodecs.codecs |> Datocms.Scalar.unwrapCodecs |> .codecDateTime |> .decoder)


banner :
    SelectionSet decodesTo Datocms.Object.FileField
    -> SelectionSet (Maybe decodesTo) Datocms.Object.ArticleRecord
banner object____ =
    Object.selectionForCompositeField "banner" [] object____ (Basics.identity >> Decode.nullable)


type alias BannerAttributionOptionalArguments =
    { locale : OptionalArgument Datocms.Enum.SiteLocale.SiteLocale }


{-|

  - locale - The locale to use to fetch the field's content

-}
bannerAttribution :
    (BannerAttributionOptionalArguments -> BannerAttributionOptionalArguments)
    -> SelectionSet decodesTo Datocms.Object.BannerAttributionRecord
    -> SelectionSet (Maybe (List (Maybe decodesTo))) Datocms.Object.ArticleRecord
bannerAttribution fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { locale = Absent }

        optionalArgs____ =
            [ Argument.optional "locale" filledInOptionals____.locale (Encode.enum Datocms.Enum.SiteLocale.toString) ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "bannerAttribution" optionalArgs____ object____ (Basics.identity >> Decode.nullable >> Decode.list >> Decode.nullable)


type alias ContentOptionalArguments =
    { locale : OptionalArgument Datocms.Enum.SiteLocale.SiteLocale }


{-|

  - locale - The locale to use to fetch the field's content

-}
content :
    (ContentOptionalArguments -> ContentOptionalArguments)
    -> SelectionSet decodesTo Datocms.Object.ArticleModelContentField
    -> SelectionSet (Maybe decodesTo) Datocms.Object.ArticleRecord
content fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { locale = Absent }

        optionalArgs____ =
            [ Argument.optional "locale" filledInOptionals____.locale (Encode.enum Datocms.Enum.SiteLocale.toString) ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "content" optionalArgs____ object____ (Basics.identity >> Decode.nullable)


createdAt : SelectionSet ScalarCodecs.DateTime Datocms.Object.ArticleRecord
createdAt =
    Object.selectionForField "ScalarCodecs.DateTime" "createdAt" [] (ScalarCodecs.codecs |> Datocms.Scalar.unwrapCodecs |> .codecDateTime |> .decoder)


type alias DescriptionOptionalArguments =
    { markdown : OptionalArgument Bool
    , locale : OptionalArgument Datocms.Enum.SiteLocale.SiteLocale
    }


{-|

  - markdown - Process content as markdown
  - locale - The locale to use to fetch the field's content

-}
description :
    (DescriptionOptionalArguments -> DescriptionOptionalArguments)
    -> SelectionSet (Maybe String) Datocms.Object.ArticleRecord
description fillInOptionals____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { markdown = Absent, locale = Absent }

        optionalArgs____ =
            [ Argument.optional "markdown" filledInOptionals____.markdown Encode.bool, Argument.optional "locale" filledInOptionals____.locale (Encode.enum Datocms.Enum.SiteLocale.toString) ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForField "(Maybe String)" "description" optionalArgs____ (Decode.string |> Decode.nullable)


id : SelectionSet ScalarCodecs.ItemId Datocms.Object.ArticleRecord
id =
    Object.selectionForField "ScalarCodecs.ItemId" "id" [] (ScalarCodecs.codecs |> Datocms.Scalar.unwrapCodecs |> .codecItemId |> .decoder)


type alias NameOptionalArguments =
    { locale : OptionalArgument Datocms.Enum.SiteLocale.SiteLocale }


{-|

  - locale - The locale to use to fetch the field's content

-}
name :
    (NameOptionalArguments -> NameOptionalArguments)
    -> SelectionSet (Maybe String) Datocms.Object.ArticleRecord
name fillInOptionals____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { locale = Absent }

        optionalArgs____ =
            [ Argument.optional "locale" filledInOptionals____.locale (Encode.enum Datocms.Enum.SiteLocale.toString) ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForField "(Maybe String)" "name" optionalArgs____ (Decode.string |> Decode.nullable)


type alias SlugOptionalArguments =
    { locale : OptionalArgument Datocms.Enum.SiteLocale.SiteLocale }


{-|

  - locale - The locale to use to fetch the field's content

-}
slug :
    (SlugOptionalArguments -> SlugOptionalArguments)
    -> SelectionSet (Maybe String) Datocms.Object.ArticleRecord
slug fillInOptionals____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { locale = Absent }

        optionalArgs____ =
            [ Argument.optional "locale" filledInOptionals____.locale (Encode.enum Datocms.Enum.SiteLocale.toString) ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForField "(Maybe String)" "slug" optionalArgs____ (Decode.string |> Decode.nullable)


updatedAt : SelectionSet ScalarCodecs.DateTime Datocms.Object.ArticleRecord
updatedAt =
    Object.selectionForField "ScalarCodecs.DateTime" "updatedAt" [] (ScalarCodecs.codecs |> Datocms.Scalar.unwrapCodecs |> .codecDateTime |> .decoder)
