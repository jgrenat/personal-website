-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Datocms.Object.FileField exposing (..)

import Datocms.Enum.SiteLocale
import Datocms.InputObject
import Datocms.Interface
import Datocms.Object
import Datocms.Scalar
import Datocms.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode
import ScalarCodecs


createdAt_ : SelectionSet ScalarCodecs.DateTime Datocms.Object.FileField
createdAt_ =
    Object.selectionForField "ScalarCodecs.DateTime" "_createdAt" [] (ScalarCodecs.codecs |> Datocms.Scalar.unwrapCodecs |> .codecDateTime |> .decoder)


updatedAt_ : SelectionSet ScalarCodecs.DateTime Datocms.Object.FileField
updatedAt_ =
    Object.selectionForField "ScalarCodecs.DateTime" "_updatedAt" [] (ScalarCodecs.codecs |> Datocms.Scalar.unwrapCodecs |> .codecDateTime |> .decoder)


type alias AltOptionalArguments =
    { locale : OptionalArgument Datocms.Enum.SiteLocale.SiteLocale }


{-|

  - locale - The locale to use to fetch the field's content

-}
alt :
    (AltOptionalArguments -> AltOptionalArguments)
    -> SelectionSet (Maybe String) Datocms.Object.FileField
alt fillInOptionals____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { locale = Absent }

        optionalArgs____ =
            [ Argument.optional "locale" filledInOptionals____.locale (Encode.enum Datocms.Enum.SiteLocale.toString) ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForField "(Maybe String)" "alt" optionalArgs____ (Decode.string |> Decode.nullable)


author : SelectionSet (Maybe String) Datocms.Object.FileField
author =
    Object.selectionForField "(Maybe String)" "author" [] (Decode.string |> Decode.nullable)


basename : SelectionSet String Datocms.Object.FileField
basename =
    Object.selectionForField "String" "basename" [] Decode.string


type alias BlurUpThumbOptionalArguments =
    { punch : OptionalArgument Float
    , size : OptionalArgument Int
    , quality : OptionalArgument Int
    , imgixParams : OptionalArgument Datocms.InputObject.ImgixParams
    }


{-|

  - punch - Controls the "punch" value (~contrast) of the blurhash decoding algorithm (defaults to 1.0)
  - size - Maximum image dimension (defaults to 24px)
  - quality - JPEG quality (defaults to 70%)
  - imgixParams - Imgix transformations to apply to the image

-}
blurUpThumb :
    (BlurUpThumbOptionalArguments -> BlurUpThumbOptionalArguments)
    -> SelectionSet (Maybe String) Datocms.Object.FileField
blurUpThumb fillInOptionals____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { punch = Absent, size = Absent, quality = Absent, imgixParams = Absent }

        optionalArgs____ =
            [ Argument.optional "punch" filledInOptionals____.punch Encode.float, Argument.optional "size" filledInOptionals____.size Encode.int, Argument.optional "quality" filledInOptionals____.quality Encode.int, Argument.optional "imgixParams" filledInOptionals____.imgixParams Datocms.InputObject.encodeImgixParams ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForField "(Maybe String)" "blurUpThumb" optionalArgs____ (Decode.string |> Decode.nullable)


blurhash : SelectionSet (Maybe String) Datocms.Object.FileField
blurhash =
    Object.selectionForField "(Maybe String)" "blurhash" [] (Decode.string |> Decode.nullable)


colors :
    SelectionSet decodesTo Datocms.Object.ColorField
    -> SelectionSet (List (Maybe decodesTo)) Datocms.Object.FileField
colors object____ =
    Object.selectionForCompositeField "colors" [] object____ (Basics.identity >> Decode.nullable >> Decode.list)


copyright : SelectionSet (Maybe String) Datocms.Object.FileField
copyright =
    Object.selectionForField "(Maybe String)" "copyright" [] (Decode.string |> Decode.nullable)


type alias CustomDataOptionalArguments =
    { locale : OptionalArgument Datocms.Enum.SiteLocale.SiteLocale }


{-|

  - locale - The locale to use to fetch the field's content

-}
customData :
    (CustomDataOptionalArguments -> CustomDataOptionalArguments)
    -> SelectionSet (Maybe ScalarCodecs.CustomData) Datocms.Object.FileField
customData fillInOptionals____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { locale = Absent }

        optionalArgs____ =
            [ Argument.optional "locale" filledInOptionals____.locale (Encode.enum Datocms.Enum.SiteLocale.toString) ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForField "(Maybe ScalarCodecs.CustomData)" "customData" optionalArgs____ (ScalarCodecs.codecs |> Datocms.Scalar.unwrapCodecs |> .codecCustomData |> .decoder |> Decode.nullable)


exifInfo : SelectionSet (Maybe ScalarCodecs.CustomData) Datocms.Object.FileField
exifInfo =
    Object.selectionForField "(Maybe ScalarCodecs.CustomData)" "exifInfo" [] (ScalarCodecs.codecs |> Datocms.Scalar.unwrapCodecs |> .codecCustomData |> .decoder |> Decode.nullable)


filename : SelectionSet String Datocms.Object.FileField
filename =
    Object.selectionForField "String" "filename" [] Decode.string


type alias FocalPointOptionalArguments =
    { locale : OptionalArgument Datocms.Enum.SiteLocale.SiteLocale }


{-|

  - locale - The locale to use to fetch the field's content

-}
focalPoint :
    (FocalPointOptionalArguments -> FocalPointOptionalArguments)
    -> SelectionSet decodesTo Datocms.Object.FocalPoint
    -> SelectionSet (Maybe decodesTo) Datocms.Object.FileField
focalPoint fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { locale = Absent }

        optionalArgs____ =
            [ Argument.optional "locale" filledInOptionals____.locale (Encode.enum Datocms.Enum.SiteLocale.toString) ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "focalPoint" optionalArgs____ object____ (Basics.identity >> Decode.nullable)


format : SelectionSet String Datocms.Object.FileField
format =
    Object.selectionForField "String" "format" [] Decode.string


height : SelectionSet (Maybe ScalarCodecs.IntType) Datocms.Object.FileField
height =
    Object.selectionForField "(Maybe ScalarCodecs.IntType)" "height" [] (ScalarCodecs.codecs |> Datocms.Scalar.unwrapCodecs |> .codecIntType |> .decoder |> Decode.nullable)


id : SelectionSet ScalarCodecs.UploadId Datocms.Object.FileField
id =
    Object.selectionForField "ScalarCodecs.UploadId" "id" [] (ScalarCodecs.codecs |> Datocms.Scalar.unwrapCodecs |> .codecUploadId |> .decoder)


md5 : SelectionSet String Datocms.Object.FileField
md5 =
    Object.selectionForField "String" "md5" [] Decode.string


mimeType : SelectionSet String Datocms.Object.FileField
mimeType =
    Object.selectionForField "String" "mimeType" [] Decode.string


notes : SelectionSet (Maybe String) Datocms.Object.FileField
notes =
    Object.selectionForField "(Maybe String)" "notes" [] (Decode.string |> Decode.nullable)


type alias ResponsiveImageOptionalArguments =
    { imgixParams : OptionalArgument Datocms.InputObject.ImgixParams
    , sizes : OptionalArgument String
    }


{-|

  - imgixParams - Imgix transformations to apply to the image
  - sizes - Specify a custom `sizes` attribute for the image

-}
responsiveImage :
    (ResponsiveImageOptionalArguments -> ResponsiveImageOptionalArguments)
    -> SelectionSet decodesTo Datocms.Object.ResponsiveImage
    -> SelectionSet (Maybe decodesTo) Datocms.Object.FileField
responsiveImage fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { imgixParams = Absent, sizes = Absent }

        optionalArgs____ =
            [ Argument.optional "imgixParams" filledInOptionals____.imgixParams Datocms.InputObject.encodeImgixParams, Argument.optional "sizes" filledInOptionals____.sizes Encode.string ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "responsiveImage" optionalArgs____ object____ (Basics.identity >> Decode.nullable)


size : SelectionSet ScalarCodecs.IntType Datocms.Object.FileField
size =
    Object.selectionForField "ScalarCodecs.IntType" "size" [] (ScalarCodecs.codecs |> Datocms.Scalar.unwrapCodecs |> .codecIntType |> .decoder)


smartTags : SelectionSet (List (Maybe String)) Datocms.Object.FileField
smartTags =
    Object.selectionForField "(List (Maybe String))" "smartTags" [] (Decode.string |> Decode.nullable |> Decode.list)


tags : SelectionSet (List (Maybe String)) Datocms.Object.FileField
tags =
    Object.selectionForField "(List (Maybe String))" "tags" [] (Decode.string |> Decode.nullable |> Decode.list)


type alias TitleOptionalArguments =
    { locale : OptionalArgument Datocms.Enum.SiteLocale.SiteLocale }


{-|

  - locale - The locale to use to fetch the field's content

-}
title :
    (TitleOptionalArguments -> TitleOptionalArguments)
    -> SelectionSet (Maybe String) Datocms.Object.FileField
title fillInOptionals____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { locale = Absent }

        optionalArgs____ =
            [ Argument.optional "locale" filledInOptionals____.locale (Encode.enum Datocms.Enum.SiteLocale.toString) ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForField "(Maybe String)" "title" optionalArgs____ (Decode.string |> Decode.nullable)


type alias UrlOptionalArguments =
    { imgixParams : OptionalArgument Datocms.InputObject.ImgixParams }


{-|

  - imgixParams - Imgix transformations to apply to the image

-}
url :
    (UrlOptionalArguments -> UrlOptionalArguments)
    -> SelectionSet String Datocms.Object.FileField
url fillInOptionals____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { imgixParams = Absent }

        optionalArgs____ =
            [ Argument.optional "imgixParams" filledInOptionals____.imgixParams Datocms.InputObject.encodeImgixParams ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForField "String" "url" optionalArgs____ Decode.string


video :
    SelectionSet decodesTo Datocms.Object.UploadVideoField
    -> SelectionSet (Maybe decodesTo) Datocms.Object.FileField
video object____ =
    Object.selectionForCompositeField "video" [] object____ (Basics.identity >> Decode.nullable)


width : SelectionSet (Maybe ScalarCodecs.IntType) Datocms.Object.FileField
width =
    Object.selectionForField "(Maybe ScalarCodecs.IntType)" "width" [] (ScalarCodecs.codecs |> Datocms.Scalar.unwrapCodecs |> .codecIntType |> .decoder |> Decode.nullable)
