-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Datocms.Query exposing (..)

import Datocms.Enum.ArticleModelOrderBy
import Datocms.Enum.SiteLocale
import Datocms.Enum.UploadOrderBy
import Datocms.InputObject
import Datocms.Interface
import Datocms.Object
import Datocms.Scalar
import Datocms.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)
import ScalarCodecs


type alias AllArticlesMetaOptionalArguments =
    { locale : OptionalArgument Datocms.Enum.SiteLocale.SiteLocale
    , filter : OptionalArgument Datocms.InputObject.ArticleModelFilter
    }


{-| Returns meta information regarding a record collection

  - locale - The locale to use to fetch the field's content

-}
allArticlesMeta_ :
    (AllArticlesMetaOptionalArguments -> AllArticlesMetaOptionalArguments)
    -> SelectionSet decodesTo Datocms.Object.CollectionMetadata
    -> SelectionSet decodesTo RootQuery
allArticlesMeta_ fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { locale = Absent, filter = Absent }

        optionalArgs____ =
            [ Argument.optional "locale" filledInOptionals____.locale (Encode.enum Datocms.Enum.SiteLocale.toString), Argument.optional "filter" filledInOptionals____.filter Datocms.InputObject.encodeArticleModelFilter ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "_allArticlesMeta" optionalArgs____ object____ Basics.identity


type alias AllUploadsMetaOptionalArguments =
    { locale : OptionalArgument Datocms.Enum.SiteLocale.SiteLocale
    , filter : OptionalArgument Datocms.InputObject.UploadFilter
    }


{-| Returns meta information regarding an assets collection

  - locale - The locale to use to fetch the field's content

-}
allUploadsMeta_ :
    (AllUploadsMetaOptionalArguments -> AllUploadsMetaOptionalArguments)
    -> SelectionSet decodesTo Datocms.Object.CollectionMetadata
    -> SelectionSet (Maybe decodesTo) RootQuery
allUploadsMeta_ fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { locale = Absent, filter = Absent }

        optionalArgs____ =
            [ Argument.optional "locale" filledInOptionals____.locale (Encode.enum Datocms.Enum.SiteLocale.toString), Argument.optional "filter" filledInOptionals____.filter Datocms.InputObject.encodeUploadFilter ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "_allUploadsMeta" optionalArgs____ object____ (Basics.identity >> Decode.nullable)


type alias SiteOptionalArguments =
    { locale : OptionalArgument Datocms.Enum.SiteLocale.SiteLocale }


{-| Returns the single instance record

  - locale - The locale to use to fetch the field's content

-}
site_ :
    (SiteOptionalArguments -> SiteOptionalArguments)
    -> SelectionSet decodesTo Datocms.Object.Site
    -> SelectionSet decodesTo RootQuery
site_ fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { locale = Absent }

        optionalArgs____ =
            [ Argument.optional "locale" filledInOptionals____.locale (Encode.enum Datocms.Enum.SiteLocale.toString) ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "_site" optionalArgs____ object____ Basics.identity


type alias AllArticlesOptionalArguments =
    { locale : OptionalArgument Datocms.Enum.SiteLocale.SiteLocale
    , skip : OptionalArgument ScalarCodecs.IntType
    , first : OptionalArgument ScalarCodecs.IntType
    , filter : OptionalArgument Datocms.InputObject.ArticleModelFilter
    , orderBy : OptionalArgument (List (Maybe Datocms.Enum.ArticleModelOrderBy.ArticleModelOrderBy))
    }


{-| Returns a collection of records

  - locale - The locale to use to fetch the field's content
  - skip - Skip the first results
  - first - Limit the number of results

-}
allArticles :
    (AllArticlesOptionalArguments -> AllArticlesOptionalArguments)
    -> SelectionSet decodesTo Datocms.Object.ArticleRecord
    -> SelectionSet (List decodesTo) RootQuery
allArticles fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { locale = Absent, skip = Absent, first = Absent, filter = Absent, orderBy = Absent }

        optionalArgs____ =
            [ Argument.optional "locale" filledInOptionals____.locale (Encode.enum Datocms.Enum.SiteLocale.toString), Argument.optional "skip" filledInOptionals____.skip (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecIntType), Argument.optional "first" filledInOptionals____.first (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecIntType), Argument.optional "filter" filledInOptionals____.filter Datocms.InputObject.encodeArticleModelFilter, Argument.optional "orderBy" filledInOptionals____.orderBy (Encode.enum Datocms.Enum.ArticleModelOrderBy.toString |> Encode.maybe |> Encode.list) ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "allArticles" optionalArgs____ object____ (Basics.identity >> Decode.list)


type alias AllUploadsOptionalArguments =
    { locale : OptionalArgument Datocms.Enum.SiteLocale.SiteLocale
    , skip : OptionalArgument ScalarCodecs.IntType
    , first : OptionalArgument ScalarCodecs.IntType
    , filter : OptionalArgument Datocms.InputObject.UploadFilter
    , orderBy : OptionalArgument (List (Maybe Datocms.Enum.UploadOrderBy.UploadOrderBy))
    }


{-| Returns a collection of assets

  - locale - The locale to use to fetch the field's content
  - skip - Skip the first results
  - first - Limit the number of results

-}
allUploads :
    (AllUploadsOptionalArguments -> AllUploadsOptionalArguments)
    -> SelectionSet decodesTo Datocms.Object.FileField
    -> SelectionSet (List decodesTo) RootQuery
allUploads fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { locale = Absent, skip = Absent, first = Absent, filter = Absent, orderBy = Absent }

        optionalArgs____ =
            [ Argument.optional "locale" filledInOptionals____.locale (Encode.enum Datocms.Enum.SiteLocale.toString), Argument.optional "skip" filledInOptionals____.skip (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecIntType), Argument.optional "first" filledInOptionals____.first (ScalarCodecs.codecs |> Datocms.Scalar.unwrapEncoder .codecIntType), Argument.optional "filter" filledInOptionals____.filter Datocms.InputObject.encodeUploadFilter, Argument.optional "orderBy" filledInOptionals____.orderBy (Encode.enum Datocms.Enum.UploadOrderBy.toString |> Encode.maybe |> Encode.list) ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "allUploads" optionalArgs____ object____ (Basics.identity >> Decode.list)


type alias ArticleOptionalArguments =
    { locale : OptionalArgument Datocms.Enum.SiteLocale.SiteLocale
    , filter : OptionalArgument Datocms.InputObject.ArticleModelFilter
    , orderBy : OptionalArgument (List (Maybe Datocms.Enum.ArticleModelOrderBy.ArticleModelOrderBy))
    }


{-| Returns a specific record

  - locale - The locale to use to fetch the field's content

-}
article :
    (ArticleOptionalArguments -> ArticleOptionalArguments)
    -> SelectionSet decodesTo Datocms.Object.ArticleRecord
    -> SelectionSet (Maybe decodesTo) RootQuery
article fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { locale = Absent, filter = Absent, orderBy = Absent }

        optionalArgs____ =
            [ Argument.optional "locale" filledInOptionals____.locale (Encode.enum Datocms.Enum.SiteLocale.toString), Argument.optional "filter" filledInOptionals____.filter Datocms.InputObject.encodeArticleModelFilter, Argument.optional "orderBy" filledInOptionals____.orderBy (Encode.enum Datocms.Enum.ArticleModelOrderBy.toString |> Encode.maybe |> Encode.list) ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "article" optionalArgs____ object____ (Basics.identity >> Decode.nullable)


type alias HomePageOptionalArguments =
    { locale : OptionalArgument Datocms.Enum.SiteLocale.SiteLocale }


{-| Returns the single instance record

  - locale - The locale to use to fetch the field's content

-}
homePage :
    (HomePageOptionalArguments -> HomePageOptionalArguments)
    -> SelectionSet decodesTo Datocms.Object.HomePageRecord
    -> SelectionSet (Maybe decodesTo) RootQuery
homePage fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { locale = Absent }

        optionalArgs____ =
            [ Argument.optional "locale" filledInOptionals____.locale (Encode.enum Datocms.Enum.SiteLocale.toString) ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "homePage" optionalArgs____ object____ (Basics.identity >> Decode.nullable)


type alias UploadOptionalArguments =
    { locale : OptionalArgument Datocms.Enum.SiteLocale.SiteLocale
    , filter : OptionalArgument Datocms.InputObject.UploadFilter
    , orderBy : OptionalArgument (List (Maybe Datocms.Enum.UploadOrderBy.UploadOrderBy))
    }


{-| Returns a specific asset

  - locale - The locale to use to fetch the field's content

-}
upload :
    (UploadOptionalArguments -> UploadOptionalArguments)
    -> SelectionSet decodesTo Datocms.Object.FileField
    -> SelectionSet (Maybe decodesTo) RootQuery
upload fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { locale = Absent, filter = Absent, orderBy = Absent }

        optionalArgs____ =
            [ Argument.optional "locale" filledInOptionals____.locale (Encode.enum Datocms.Enum.SiteLocale.toString), Argument.optional "filter" filledInOptionals____.filter Datocms.InputObject.encodeUploadFilter, Argument.optional "orderBy" filledInOptionals____.orderBy (Encode.enum Datocms.Enum.UploadOrderBy.toString |> Encode.maybe |> Encode.list) ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "upload" optionalArgs____ object____ (Basics.identity >> Decode.nullable)


type alias WebsiteConfigurationOptionalArguments =
    { locale : OptionalArgument Datocms.Enum.SiteLocale.SiteLocale }


{-| Returns the single instance record

  - locale - The locale to use to fetch the field's content

-}
websiteConfiguration :
    (WebsiteConfigurationOptionalArguments -> WebsiteConfigurationOptionalArguments)
    -> SelectionSet decodesTo Datocms.Object.WebsiteConfigurationRecord
    -> SelectionSet (Maybe decodesTo) RootQuery
websiteConfiguration fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { locale = Absent }

        optionalArgs____ =
            [ Argument.optional "locale" filledInOptionals____.locale (Encode.enum Datocms.Enum.SiteLocale.toString) ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "websiteConfiguration" optionalArgs____ object____ (Basics.identity >> Decode.nullable)
